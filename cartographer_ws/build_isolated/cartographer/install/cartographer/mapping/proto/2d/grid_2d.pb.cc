// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/grid_2d.proto

#include "cartographer/mapping/proto/2d/grid_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace proto {
class Grid2D_CellBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Grid2D_CellBox>
      _instance;
} _Grid2D_CellBox_default_instance_;
class Grid2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Grid2D>
      _instance;
  const ::cartographer::mapping::proto::ProbabilityGrid* probability_grid_2d_;
} _Grid2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto {
void InitDefaultsGrid2D_CellBoxImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cartographer::mapping::proto::_Grid2D_CellBox_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Grid2D_CellBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Grid2D_CellBox::InitAsDefaultInstance();
}

void InitDefaultsGrid2D_CellBox() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGrid2D_CellBoxImpl);
}

void InitDefaultsGrid2DImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto::InitDefaultsMapLimits();
  protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::InitDefaultsGrid2D_CellBox();
  protobuf_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto::InitDefaultsProbabilityGrid();
  {
    void* ptr = &::cartographer::mapping::proto::_Grid2D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Grid2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Grid2D::InitAsDefaultInstance();
}

void InitDefaultsGrid2D() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGrid2DImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D_CellBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D_CellBox, max_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D_CellBox, max_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D_CellBox, min_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D_CellBox, min_y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, cells_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, known_cells_box_),
  offsetof(::cartographer::mapping::proto::Grid2DDefaultTypeInternal, probability_grid_2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, min_correspondence_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, max_correspondence_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, grid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::Grid2D_CellBox)},
  { 9, -1, sizeof(::cartographer::mapping::proto::Grid2D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_Grid2D_CellBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_Grid2D_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/2d/grid_2d.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n+cartographer/mapping/proto/2d/grid_2d."
      "proto\022\032cartographer.mapping.proto\032.carto"
      "grapher/mapping/proto/2d/map_limits.prot"
      "o\0324cartographer/mapping/proto/2d/probabi"
      "lity_grid.proto\"\360\002\n\006Grid2D\0225\n\006limits\030\001 \001"
      "(\0132%.cartographer.mapping.proto.MapLimit"
      "s\022\r\n\005cells\030\002 \003(\005\022C\n\017known_cells_box\030\003 \001("
      "\0132*.cartographer.mapping.proto.Grid2D.Ce"
      "llBox\022J\n\023probability_grid_2d\030\004 \001(\0132+.car"
      "tographer.mapping.proto.ProbabilityGridH"
      "\000\022\037\n\027min_correspondence_cost\030\006 \001(\002\022\037\n\027ma"
      "x_correspondence_cost\030\007 \001(\002\032E\n\007CellBox\022\r"
      "\n\005max_x\030\001 \001(\005\022\r\n\005max_y\030\002 \001(\005\022\r\n\005min_x\030\003 "
      "\001(\005\022\r\n\005min_y\030\004 \001(\005B\006\n\004gridb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 554);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/2d/grid_2d.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void Grid2D_CellBox::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grid2D_CellBox::kMaxXFieldNumber;
const int Grid2D_CellBox::kMaxYFieldNumber;
const int Grid2D_CellBox::kMinXFieldNumber;
const int Grid2D_CellBox::kMinYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grid2D_CellBox::Grid2D_CellBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::InitDefaultsGrid2D_CellBox();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Grid2D.CellBox)
}
Grid2D_CellBox::Grid2D_CellBox(const Grid2D_CellBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_x_, &from.max_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_y_) -
    reinterpret_cast<char*>(&max_x_)) + sizeof(min_y_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Grid2D.CellBox)
}

void Grid2D_CellBox::SharedCtor() {
  ::memset(&max_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_y_) -
      reinterpret_cast<char*>(&max_x_)) + sizeof(min_y_));
  _cached_size_ = 0;
}

Grid2D_CellBox::~Grid2D_CellBox() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Grid2D.CellBox)
  SharedDtor();
}

void Grid2D_CellBox::SharedDtor() {
}

void Grid2D_CellBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grid2D_CellBox::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Grid2D_CellBox& Grid2D_CellBox::default_instance() {
  ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::InitDefaultsGrid2D_CellBox();
  return *internal_default_instance();
}

Grid2D_CellBox* Grid2D_CellBox::New(::google::protobuf::Arena* arena) const {
  Grid2D_CellBox* n = new Grid2D_CellBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grid2D_CellBox::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Grid2D.CellBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_y_) -
      reinterpret_cast<char*>(&max_x_)) + sizeof(min_y_));
  _internal_metadata_.Clear();
}

bool Grid2D_CellBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Grid2D.CellBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Grid2D.CellBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Grid2D.CellBox)
  return false;
#undef DO_
}

void Grid2D_CellBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Grid2D.CellBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_x = 1;
  if (this->max_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_x(), output);
  }

  // int32 max_y = 2;
  if (this->max_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_y(), output);
  }

  // int32 min_x = 3;
  if (this->min_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_x(), output);
  }

  // int32 min_y = 4;
  if (this->min_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Grid2D.CellBox)
}

::google::protobuf::uint8* Grid2D_CellBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Grid2D.CellBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_x = 1;
  if (this->max_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_x(), target);
  }

  // int32 max_y = 2;
  if (this->max_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_y(), target);
  }

  // int32 min_x = 3;
  if (this->min_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_x(), target);
  }

  // int32 min_y = 4;
  if (this->min_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Grid2D.CellBox)
  return target;
}

size_t Grid2D_CellBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Grid2D.CellBox)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 max_x = 1;
  if (this->max_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_x());
  }

  // int32 max_y = 2;
  if (this->max_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_y());
  }

  // int32 min_x = 3;
  if (this->min_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_x());
  }

  // int32 min_y = 4;
  if (this->min_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grid2D_CellBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  GOOGLE_DCHECK_NE(&from, this);
  const Grid2D_CellBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grid2D_CellBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Grid2D.CellBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Grid2D.CellBox)
    MergeFrom(*source);
  }
}

void Grid2D_CellBox::MergeFrom(const Grid2D_CellBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_x() != 0) {
    set_max_x(from.max_x());
  }
  if (from.max_y() != 0) {
    set_max_y(from.max_y());
  }
  if (from.min_x() != 0) {
    set_min_x(from.min_x());
  }
  if (from.min_y() != 0) {
    set_min_y(from.min_y());
  }
}

void Grid2D_CellBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid2D_CellBox::CopyFrom(const Grid2D_CellBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid2D_CellBox::IsInitialized() const {
  return true;
}

void Grid2D_CellBox::Swap(Grid2D_CellBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grid2D_CellBox::InternalSwap(Grid2D_CellBox* other) {
  using std::swap;
  swap(max_x_, other->max_x_);
  swap(max_y_, other->max_y_);
  swap(min_x_, other->min_x_);
  swap(min_y_, other->min_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grid2D_CellBox::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Grid2D::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_Grid2D_default_instance_._instance.get_mutable()->limits_ = const_cast< ::cartographer::mapping::proto::MapLimits*>(
      ::cartographer::mapping::proto::MapLimits::internal_default_instance());
  ::cartographer::mapping::proto::_Grid2D_default_instance_._instance.get_mutable()->known_cells_box_ = const_cast< ::cartographer::mapping::proto::Grid2D_CellBox*>(
      ::cartographer::mapping::proto::Grid2D_CellBox::internal_default_instance());
  ::cartographer::mapping::proto::_Grid2D_default_instance_.probability_grid_2d_ = const_cast< ::cartographer::mapping::proto::ProbabilityGrid*>(
      ::cartographer::mapping::proto::ProbabilityGrid::internal_default_instance());
}
void Grid2D::clear_limits() {
  if (GetArenaNoVirtual() == NULL && limits_ != NULL) {
    delete limits_;
  }
  limits_ = NULL;
}
void Grid2D::set_allocated_probability_grid_2d(::cartographer::mapping::proto::ProbabilityGrid* probability_grid_2d) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_grid();
  if (probability_grid_2d) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      probability_grid_2d = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, probability_grid_2d, submessage_arena);
    }
    set_has_probability_grid_2d();
    grid_.probability_grid_2d_ = probability_grid_2d;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Grid2D.probability_grid_2d)
}
void Grid2D::clear_probability_grid_2d() {
  if (has_probability_grid_2d()) {
    delete grid_.probability_grid_2d_;
    clear_has_grid();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grid2D::kLimitsFieldNumber;
const int Grid2D::kCellsFieldNumber;
const int Grid2D::kKnownCellsBoxFieldNumber;
const int Grid2D::kProbabilityGrid2DFieldNumber;
const int Grid2D::kMinCorrespondenceCostFieldNumber;
const int Grid2D::kMaxCorrespondenceCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grid2D::Grid2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::InitDefaultsGrid2D();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Grid2D)
}
Grid2D::Grid2D(const Grid2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cells_(from.cells_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_limits()) {
    limits_ = new ::cartographer::mapping::proto::MapLimits(*from.limits_);
  } else {
    limits_ = NULL;
  }
  if (from.has_known_cells_box()) {
    known_cells_box_ = new ::cartographer::mapping::proto::Grid2D_CellBox(*from.known_cells_box_);
  } else {
    known_cells_box_ = NULL;
  }
  ::memcpy(&min_correspondence_cost_, &from.min_correspondence_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_correspondence_cost_) -
    reinterpret_cast<char*>(&min_correspondence_cost_)) + sizeof(max_correspondence_cost_));
  clear_has_grid();
  switch (from.grid_case()) {
    case kProbabilityGrid2D: {
      mutable_probability_grid_2d()->::cartographer::mapping::proto::ProbabilityGrid::MergeFrom(from.probability_grid_2d());
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Grid2D)
}

void Grid2D::SharedCtor() {
  ::memset(&limits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_correspondence_cost_) -
      reinterpret_cast<char*>(&limits_)) + sizeof(max_correspondence_cost_));
  clear_has_grid();
  _cached_size_ = 0;
}

Grid2D::~Grid2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Grid2D)
  SharedDtor();
}

void Grid2D::SharedDtor() {
  if (this != internal_default_instance()) delete limits_;
  if (this != internal_default_instance()) delete known_cells_box_;
  if (has_grid()) {
    clear_grid();
  }
}

void Grid2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grid2D::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Grid2D& Grid2D::default_instance() {
  ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::InitDefaultsGrid2D();
  return *internal_default_instance();
}

Grid2D* Grid2D::New(::google::protobuf::Arena* arena) const {
  Grid2D* n = new Grid2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grid2D::clear_grid() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.mapping.proto.Grid2D)
  switch (grid_case()) {
    case kProbabilityGrid2D: {
      delete grid_.probability_grid_2d_;
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GRID_NOT_SET;
}


void Grid2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Grid2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  if (GetArenaNoVirtual() == NULL && limits_ != NULL) {
    delete limits_;
  }
  limits_ = NULL;
  if (GetArenaNoVirtual() == NULL && known_cells_box_ != NULL) {
    delete known_cells_box_;
  }
  known_cells_box_ = NULL;
  ::memset(&min_correspondence_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_correspondence_cost_) -
      reinterpret_cast<char*>(&min_correspondence_cost_)) + sizeof(max_correspondence_cost_));
  clear_grid();
  _internal_metadata_.Clear();
}

bool Grid2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Grid2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.MapLimits limits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cells = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cells())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_cells())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_known_cells_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_probability_grid_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_correspondence_cost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_correspondence_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_correspondence_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_correspondence_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Grid2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Grid2D)
  return false;
#undef DO_
}

void Grid2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Grid2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->limits_, output);
  }

  // repeated int32 cells = 2;
  if (this->cells_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cells_cached_byte_size_));
  }
  for (int i = 0, n = this->cells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->cells(i), output);
  }

  // .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
  if (this->has_known_cells_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->known_cells_box_, output);
  }

  // .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
  if (has_probability_grid_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *grid_.probability_grid_2d_, output);
  }

  // float min_correspondence_cost = 6;
  if (this->min_correspondence_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->min_correspondence_cost(), output);
  }

  // float max_correspondence_cost = 7;
  if (this->max_correspondence_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_correspondence_cost(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Grid2D)
}

::google::protobuf::uint8* Grid2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Grid2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->limits_, deterministic, target);
  }

  // repeated int32 cells = 2;
  if (this->cells_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _cells_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->cells_, target);
  }

  // .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
  if (this->has_known_cells_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->known_cells_box_, deterministic, target);
  }

  // .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
  if (has_probability_grid_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *grid_.probability_grid_2d_, deterministic, target);
  }

  // float min_correspondence_cost = 6;
  if (this->min_correspondence_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->min_correspondence_cost(), target);
  }

  // float max_correspondence_cost = 7;
  if (this->max_correspondence_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max_correspondence_cost(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Grid2D)
  return target;
}

size_t Grid2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Grid2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 cells = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cells_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cells_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .cartographer.mapping.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->limits_);
  }

  // .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
  if (this->has_known_cells_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->known_cells_box_);
  }

  // float min_correspondence_cost = 6;
  if (this->min_correspondence_cost() != 0) {
    total_size += 1 + 4;
  }

  // float max_correspondence_cost = 7;
  if (this->max_correspondence_cost() != 0) {
    total_size += 1 + 4;
  }

  switch (grid_case()) {
    // .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
    case kProbabilityGrid2D: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *grid_.probability_grid_2d_);
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grid2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Grid2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Grid2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grid2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Grid2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Grid2D)
    MergeFrom(*source);
  }
}

void Grid2D::MergeFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Grid2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  if (from.has_limits()) {
    mutable_limits()->::cartographer::mapping::proto::MapLimits::MergeFrom(from.limits());
  }
  if (from.has_known_cells_box()) {
    mutable_known_cells_box()->::cartographer::mapping::proto::Grid2D_CellBox::MergeFrom(from.known_cells_box());
  }
  if (from.min_correspondence_cost() != 0) {
    set_min_correspondence_cost(from.min_correspondence_cost());
  }
  if (from.max_correspondence_cost() != 0) {
    set_max_correspondence_cost(from.max_correspondence_cost());
  }
  switch (from.grid_case()) {
    case kProbabilityGrid2D: {
      mutable_probability_grid_2d()->::cartographer::mapping::proto::ProbabilityGrid::MergeFrom(from.probability_grid_2d());
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
}

void Grid2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Grid2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid2D::CopyFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Grid2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid2D::IsInitialized() const {
  return true;
}

void Grid2D::Swap(Grid2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grid2D::InternalSwap(Grid2D* other) {
  using std::swap;
  cells_.InternalSwap(&other->cells_);
  swap(limits_, other->limits_);
  swap(known_cells_box_, other->known_cells_box_);
  swap(min_correspondence_cost_, other->min_correspondence_cost_);
  swap(max_correspondence_cost_, other->max_correspondence_cost_);
  swap(grid_, other->grid_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grid2D::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
