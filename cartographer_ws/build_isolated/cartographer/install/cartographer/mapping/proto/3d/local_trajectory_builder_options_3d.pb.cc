// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.proto

#include "cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace proto {
class LocalTrajectoryBuilderOptions3DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalTrajectoryBuilderOptions3D>
      _instance;
} _LocalTrajectoryBuilderOptions3D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace protobuf_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto {
void InitDefaultsLocalTrajectoryBuilderOptions3DImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::InitDefaultsAdaptiveVoxelFilterOptions();
  protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::InitDefaultsRealTimeCorrelativeScanMatcherOptions();
  protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto::InitDefaultsCeresScanMatcherOptions3D();
  protobuf_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto::InitDefaultsMotionFilterOptions();
  protobuf_cartographer_2fmapping_2fproto_2f3d_2fsubmaps_5foptions_5f3d_2eproto::InitDefaultsSubmapsOptions3D();
  {
    void* ptr = &::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D::InitAsDefaultInstance();
}

void InitDefaultsLocalTrajectoryBuilderOptions3D() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLocalTrajectoryBuilderOptions3DImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, min_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, max_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, num_accumulated_range_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, voxel_filter_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, high_resolution_adaptive_voxel_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, low_resolution_adaptive_voxel_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, use_online_correlative_scan_matching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, real_time_correlative_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, ceres_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, motion_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, imu_gravity_time_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, rotational_histogram_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, submaps_options_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nGcartographer/mapping/proto/3d/local_tr"
      "ajectory_builder_options_3d.proto\022\032carto"
      "grapher.mapping.proto\0326cartographer/mapp"
      "ing/proto/3d/submaps_options_3d.proto\0326c"
      "artographer/mapping/proto/motion_filter_"
      "options.proto\032Lcartographer/mapping/prot"
      "o/scan_matching/ceres_scan_matcher_optio"
      "ns_3d.proto\032Ycartographer/mapping/proto/"
      "scan_matching/real_time_correlative_scan"
      "_matcher_options.proto\032=cartographer/sen"
      "sor/proto/adaptive_voxel_filter_options."
      "proto\"\333\006\n\037LocalTrajectoryBuilderOptions3"
      "D\022\021\n\tmin_range\030\001 \001(\002\022\021\n\tmax_range\030\002 \001(\002\022"
      "\"\n\032num_accumulated_range_data\030\003 \001(\005\022\031\n\021v"
      "oxel_filter_size\030\004 \001(\002\022l\n-high_resolutio"
      "n_adaptive_voxel_filter_options\030\005 \001(\01325."
      "cartographer.sensor.proto.AdaptiveVoxelF"
      "ilterOptions\022k\n,low_resolution_adaptive_"
      "voxel_filter_options\030\014 \001(\01325.cartographe"
      "r.sensor.proto.AdaptiveVoxelFilterOption"
      "s\022,\n$use_online_correlative_scan_matchin"
      "g\030\r \001(\010\022\203\001\n*real_time_correlative_scan_m"
      "atcher_options\030\016 \001(\0132O.cartographer.mapp"
      "ing.scan_matching.proto.RealTimeCorrelat"
      "iveScanMatcherOptions\022g\n\032ceres_scan_matc"
      "her_options\030\006 \001(\0132C.cartographer.mapping"
      ".scan_matching.proto.CeresScanMatcherOpt"
      "ions3D\022N\n\025motion_filter_options\030\007 \001(\0132/."
      "cartographer.mapping.proto.MotionFilterO"
      "ptions\022!\n\031imu_gravity_time_constant\030\017 \001("
      "\001\022!\n\031rotational_histogram_size\030\021 \001(\005\022E\n\017"
      "submaps_options\030\010 \001(\0132,.cartographer.map"
      "ping.proto.SubmapsOptions3Db\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2fmapping_2fproto_2f3d_2fsubmaps_5foptions_5f3d_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void LocalTrajectoryBuilderOptions3D::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->high_resolution_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->low_resolution_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->real_time_correlative_scan_matcher_options_ = const_cast< ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(
      ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->ceres_scan_matcher_options_ = const_cast< ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D*>(
      ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->motion_filter_options_ = const_cast< ::cartographer::mapping::proto::MotionFilterOptions*>(
      ::cartographer::mapping::proto::MotionFilterOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->submaps_options_ = const_cast< ::cartographer::mapping::proto::SubmapsOptions3D*>(
      ::cartographer::mapping::proto::SubmapsOptions3D::internal_default_instance());
}
void LocalTrajectoryBuilderOptions3D::clear_high_resolution_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == NULL && high_resolution_adaptive_voxel_filter_options_ != NULL) {
    delete high_resolution_adaptive_voxel_filter_options_;
  }
  high_resolution_adaptive_voxel_filter_options_ = NULL;
}
void LocalTrajectoryBuilderOptions3D::clear_low_resolution_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == NULL && low_resolution_adaptive_voxel_filter_options_ != NULL) {
    delete low_resolution_adaptive_voxel_filter_options_;
  }
  low_resolution_adaptive_voxel_filter_options_ = NULL;
}
void LocalTrajectoryBuilderOptions3D::clear_real_time_correlative_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && real_time_correlative_scan_matcher_options_ != NULL) {
    delete real_time_correlative_scan_matcher_options_;
  }
  real_time_correlative_scan_matcher_options_ = NULL;
}
void LocalTrajectoryBuilderOptions3D::clear_ceres_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) {
    delete ceres_scan_matcher_options_;
  }
  ceres_scan_matcher_options_ = NULL;
}
void LocalTrajectoryBuilderOptions3D::clear_motion_filter_options() {
  if (GetArenaNoVirtual() == NULL && motion_filter_options_ != NULL) {
    delete motion_filter_options_;
  }
  motion_filter_options_ = NULL;
}
void LocalTrajectoryBuilderOptions3D::clear_submaps_options() {
  if (GetArenaNoVirtual() == NULL && submaps_options_ != NULL) {
    delete submaps_options_;
  }
  submaps_options_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalTrajectoryBuilderOptions3D::kMinRangeFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kMaxRangeFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kNumAccumulatedRangeDataFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kVoxelFilterSizeFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kHighResolutionAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kLowResolutionAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kUseOnlineCorrelativeScanMatchingFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kRealTimeCorrelativeScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kCeresScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kMotionFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kImuGravityTimeConstantFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kRotationalHistogramSizeFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kSubmapsOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalTrajectoryBuilderOptions3D::LocalTrajectoryBuilderOptions3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto::InitDefaultsLocalTrajectoryBuilderOptions3D();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
}
LocalTrajectoryBuilderOptions3D::LocalTrajectoryBuilderOptions3D(const LocalTrajectoryBuilderOptions3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_high_resolution_adaptive_voxel_filter_options()) {
    high_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from.high_resolution_adaptive_voxel_filter_options_);
  } else {
    high_resolution_adaptive_voxel_filter_options_ = NULL;
  }
  if (from.has_ceres_scan_matcher_options()) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D(*from.ceres_scan_matcher_options_);
  } else {
    ceres_scan_matcher_options_ = NULL;
  }
  if (from.has_motion_filter_options()) {
    motion_filter_options_ = new ::cartographer::mapping::proto::MotionFilterOptions(*from.motion_filter_options_);
  } else {
    motion_filter_options_ = NULL;
  }
  if (from.has_submaps_options()) {
    submaps_options_ = new ::cartographer::mapping::proto::SubmapsOptions3D(*from.submaps_options_);
  } else {
    submaps_options_ = NULL;
  }
  if (from.has_low_resolution_adaptive_voxel_filter_options()) {
    low_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from.low_resolution_adaptive_voxel_filter_options_);
  } else {
    low_resolution_adaptive_voxel_filter_options_ = NULL;
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions(*from.real_time_correlative_scan_matcher_options_);
  } else {
    real_time_correlative_scan_matcher_options_ = NULL;
  }
  ::memcpy(&min_range_, &from.min_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotational_histogram_size_) -
    reinterpret_cast<char*>(&min_range_)) + sizeof(rotational_histogram_size_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
}

void LocalTrajectoryBuilderOptions3D::SharedCtor() {
  ::memset(&high_resolution_adaptive_voxel_filter_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotational_histogram_size_) -
      reinterpret_cast<char*>(&high_resolution_adaptive_voxel_filter_options_)) + sizeof(rotational_histogram_size_));
  _cached_size_ = 0;
}

LocalTrajectoryBuilderOptions3D::~LocalTrajectoryBuilderOptions3D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  SharedDtor();
}

void LocalTrajectoryBuilderOptions3D::SharedDtor() {
  if (this != internal_default_instance()) delete high_resolution_adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete ceres_scan_matcher_options_;
  if (this != internal_default_instance()) delete motion_filter_options_;
  if (this != internal_default_instance()) delete submaps_options_;
  if (this != internal_default_instance()) delete low_resolution_adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete real_time_correlative_scan_matcher_options_;
}

void LocalTrajectoryBuilderOptions3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalTrajectoryBuilderOptions3D::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalTrajectoryBuilderOptions3D& LocalTrajectoryBuilderOptions3D::default_instance() {
  ::protobuf_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto::InitDefaultsLocalTrajectoryBuilderOptions3D();
  return *internal_default_instance();
}

LocalTrajectoryBuilderOptions3D* LocalTrajectoryBuilderOptions3D::New(::google::protobuf::Arena* arena) const {
  LocalTrajectoryBuilderOptions3D* n = new LocalTrajectoryBuilderOptions3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalTrajectoryBuilderOptions3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && high_resolution_adaptive_voxel_filter_options_ != NULL) {
    delete high_resolution_adaptive_voxel_filter_options_;
  }
  high_resolution_adaptive_voxel_filter_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) {
    delete ceres_scan_matcher_options_;
  }
  ceres_scan_matcher_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && motion_filter_options_ != NULL) {
    delete motion_filter_options_;
  }
  motion_filter_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && submaps_options_ != NULL) {
    delete submaps_options_;
  }
  submaps_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && low_resolution_adaptive_voxel_filter_options_ != NULL) {
    delete low_resolution_adaptive_voxel_filter_options_;
  }
  low_resolution_adaptive_voxel_filter_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && real_time_correlative_scan_matcher_options_ != NULL) {
    delete real_time_correlative_scan_matcher_options_;
  }
  real_time_correlative_scan_matcher_options_ = NULL;
  ::memset(&min_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotational_histogram_size_) -
      reinterpret_cast<char*>(&min_range_)) + sizeof(rotational_histogram_size_));
  _internal_metadata_.Clear();
}

bool LocalTrajectoryBuilderOptions3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_accumulated_range_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_accumulated_range_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float voxel_filter_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voxel_filter_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_high_resolution_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ceres_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_motion_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.SubmapsOptions3D submaps_options = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submaps_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_low_resolution_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_online_correlative_scan_matching = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_online_correlative_scan_matching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_real_time_correlative_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double imu_gravity_time_constant = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_gravity_time_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rotational_histogram_size = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotational_histogram_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  return false;
#undef DO_
}

void LocalTrajectoryBuilderOptions3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_range = 1;
  if (this->min_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_range(), output);
  }

  // float max_range = 2;
  if (this->max_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_range(), output);
  }

  // int32 num_accumulated_range_data = 3;
  if (this->num_accumulated_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_accumulated_range_data(), output);
  }

  // float voxel_filter_size = 4;
  if (this->voxel_filter_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->voxel_filter_size(), output);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  if (this->has_high_resolution_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->high_resolution_adaptive_voxel_filter_options_, output);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options = 6;
  if (this->has_ceres_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->ceres_scan_matcher_options_, output);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
  if (this->has_motion_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->motion_filter_options_, output);
  }

  // .cartographer.mapping.proto.SubmapsOptions3D submaps_options = 8;
  if (this->has_submaps_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->submaps_options_, output);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  if (this->has_low_resolution_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->low_resolution_adaptive_voxel_filter_options_, output);
  }

  // bool use_online_correlative_scan_matching = 13;
  if (this->use_online_correlative_scan_matching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_online_correlative_scan_matching(), output);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->real_time_correlative_scan_matcher_options_, output);
  }

  // double imu_gravity_time_constant = 15;
  if (this->imu_gravity_time_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->imu_gravity_time_constant(), output);
  }

  // int32 rotational_histogram_size = 17;
  if (this->rotational_histogram_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->rotational_histogram_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
}

::google::protobuf::uint8* LocalTrajectoryBuilderOptions3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_range = 1;
  if (this->min_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_range(), target);
  }

  // float max_range = 2;
  if (this->max_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_range(), target);
  }

  // int32 num_accumulated_range_data = 3;
  if (this->num_accumulated_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_accumulated_range_data(), target);
  }

  // float voxel_filter_size = 4;
  if (this->voxel_filter_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->voxel_filter_size(), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  if (this->has_high_resolution_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->high_resolution_adaptive_voxel_filter_options_, deterministic, target);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options = 6;
  if (this->has_ceres_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->ceres_scan_matcher_options_, deterministic, target);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
  if (this->has_motion_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->motion_filter_options_, deterministic, target);
  }

  // .cartographer.mapping.proto.SubmapsOptions3D submaps_options = 8;
  if (this->has_submaps_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->submaps_options_, deterministic, target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  if (this->has_low_resolution_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->low_resolution_adaptive_voxel_filter_options_, deterministic, target);
  }

  // bool use_online_correlative_scan_matching = 13;
  if (this->use_online_correlative_scan_matching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->use_online_correlative_scan_matching(), target);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->real_time_correlative_scan_matcher_options_, deterministic, target);
  }

  // double imu_gravity_time_constant = 15;
  if (this->imu_gravity_time_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->imu_gravity_time_constant(), target);
  }

  // int32 rotational_histogram_size = 17;
  if (this->rotational_histogram_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->rotational_histogram_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  return target;
}

size_t LocalTrajectoryBuilderOptions3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  if (this->has_high_resolution_adaptive_voxel_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->high_resolution_adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options = 6;
  if (this->has_ceres_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ceres_scan_matcher_options_);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
  if (this->has_motion_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->motion_filter_options_);
  }

  // .cartographer.mapping.proto.SubmapsOptions3D submaps_options = 8;
  if (this->has_submaps_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->submaps_options_);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  if (this->has_low_resolution_adaptive_voxel_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->low_resolution_adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->real_time_correlative_scan_matcher_options_);
  }

  // float min_range = 1;
  if (this->min_range() != 0) {
    total_size += 1 + 4;
  }

  // float max_range = 2;
  if (this->max_range() != 0) {
    total_size += 1 + 4;
  }

  // int32 num_accumulated_range_data = 3;
  if (this->num_accumulated_range_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_accumulated_range_data());
  }

  // float voxel_filter_size = 4;
  if (this->voxel_filter_size() != 0) {
    total_size += 1 + 4;
  }

  // double imu_gravity_time_constant = 15;
  if (this->imu_gravity_time_constant() != 0) {
    total_size += 1 + 8;
  }

  // bool use_online_correlative_scan_matching = 13;
  if (this->use_online_correlative_scan_matching() != 0) {
    total_size += 1 + 1;
  }

  // int32 rotational_histogram_size = 17;
  if (this->rotational_histogram_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rotational_histogram_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalTrajectoryBuilderOptions3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalTrajectoryBuilderOptions3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalTrajectoryBuilderOptions3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
    MergeFrom(*source);
  }
}

void LocalTrajectoryBuilderOptions3D::MergeFrom(const LocalTrajectoryBuilderOptions3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_high_resolution_adaptive_voxel_filter_options()) {
    mutable_high_resolution_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.high_resolution_adaptive_voxel_filter_options());
  }
  if (from.has_ceres_scan_matcher_options()) {
    mutable_ceres_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D::MergeFrom(from.ceres_scan_matcher_options());
  }
  if (from.has_motion_filter_options()) {
    mutable_motion_filter_options()->::cartographer::mapping::proto::MotionFilterOptions::MergeFrom(from.motion_filter_options());
  }
  if (from.has_submaps_options()) {
    mutable_submaps_options()->::cartographer::mapping::proto::SubmapsOptions3D::MergeFrom(from.submaps_options());
  }
  if (from.has_low_resolution_adaptive_voxel_filter_options()) {
    mutable_low_resolution_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.low_resolution_adaptive_voxel_filter_options());
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    mutable_real_time_correlative_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::MergeFrom(from.real_time_correlative_scan_matcher_options());
  }
  if (from.min_range() != 0) {
    set_min_range(from.min_range());
  }
  if (from.max_range() != 0) {
    set_max_range(from.max_range());
  }
  if (from.num_accumulated_range_data() != 0) {
    set_num_accumulated_range_data(from.num_accumulated_range_data());
  }
  if (from.voxel_filter_size() != 0) {
    set_voxel_filter_size(from.voxel_filter_size());
  }
  if (from.imu_gravity_time_constant() != 0) {
    set_imu_gravity_time_constant(from.imu_gravity_time_constant());
  }
  if (from.use_online_correlative_scan_matching() != 0) {
    set_use_online_correlative_scan_matching(from.use_online_correlative_scan_matching());
  }
  if (from.rotational_histogram_size() != 0) {
    set_rotational_histogram_size(from.rotational_histogram_size());
  }
}

void LocalTrajectoryBuilderOptions3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalTrajectoryBuilderOptions3D::CopyFrom(const LocalTrajectoryBuilderOptions3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrajectoryBuilderOptions3D::IsInitialized() const {
  return true;
}

void LocalTrajectoryBuilderOptions3D::Swap(LocalTrajectoryBuilderOptions3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalTrajectoryBuilderOptions3D::InternalSwap(LocalTrajectoryBuilderOptions3D* other) {
  using std::swap;
  swap(high_resolution_adaptive_voxel_filter_options_, other->high_resolution_adaptive_voxel_filter_options_);
  swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
  swap(motion_filter_options_, other->motion_filter_options_);
  swap(submaps_options_, other->submaps_options_);
  swap(low_resolution_adaptive_voxel_filter_options_, other->low_resolution_adaptive_voxel_filter_options_);
  swap(real_time_correlative_scan_matcher_options_, other->real_time_correlative_scan_matcher_options_);
  swap(min_range_, other->min_range_);
  swap(max_range_, other->max_range_);
  swap(num_accumulated_range_data_, other->num_accumulated_range_data_);
  swap(voxel_filter_size_, other->voxel_filter_size_);
  swap(imu_gravity_time_constant_, other->imu_gravity_time_constant_);
  swap(use_online_correlative_scan_matching_, other->use_online_correlative_scan_matching_);
  swap(rotational_histogram_size_, other->rotational_histogram_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalTrajectoryBuilderOptions3D::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
