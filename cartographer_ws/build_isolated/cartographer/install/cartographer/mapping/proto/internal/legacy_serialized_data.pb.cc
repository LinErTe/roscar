// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/internal/legacy_serialized_data.proto

#include "cartographer/mapping/proto/internal/legacy_serialized_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace proto {
class LegacySerializedDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LegacySerializedData>
      _instance;
} _LegacySerializedData_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto {
void InitDefaultsLegacySerializedDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaultsSubmap();
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaultsNode();
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaultsImuData();
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaultsOdometryData();
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaultsFixedFramePoseData();
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaultsTrajectoryData();
  protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::InitDefaultsLandmarkData();
  {
    void* ptr = &::cartographer::mapping::proto::_LegacySerializedData_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LegacySerializedData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LegacySerializedData::InitAsDefaultInstance();
}

void InitDefaultsLegacySerializedData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLegacySerializedDataImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, submap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, imu_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, odometry_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, fixed_frame_pose_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, trajectory_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, landmark_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::LegacySerializedData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_LegacySerializedData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/internal/legacy_serialized_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n@cartographer/mapping/proto/internal/le"
      "gacy_serialized_data.proto\022\032cartographer"
      ".mapping.proto\032.cartographer/mapping/pro"
      "to/serialization.proto\"\307\003\n\024LegacySeriali"
      "zedData\0222\n\006submap\030\001 \001(\0132\".cartographer.m"
      "apping.proto.Submap\022.\n\004node\030\002 \001(\0132 .cart"
      "ographer.mapping.proto.Node\0225\n\010imu_data\030"
      "\003 \001(\0132#.cartographer.mapping.proto.ImuDa"
      "ta\022\?\n\rodometry_data\030\004 \001(\0132(.cartographer"
      ".mapping.proto.OdometryData\022M\n\025fixed_fra"
      "me_pose_data\030\005 \001(\0132..cartographer.mappin"
      "g.proto.FixedFramePoseData\022C\n\017trajectory"
      "_data\030\006 \001(\0132*.cartographer.mapping.proto"
      ".TrajectoryData\022\?\n\rlandmark_data\030\007 \001(\0132("
      ".cartographer.mapping.proto.LandmarkData"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/internal/legacy_serialized_data.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void LegacySerializedData::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->submap_ = const_cast< ::cartographer::mapping::proto::Submap*>(
      ::cartographer::mapping::proto::Submap::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->node_ = const_cast< ::cartographer::mapping::proto::Node*>(
      ::cartographer::mapping::proto::Node::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->imu_data_ = const_cast< ::cartographer::mapping::proto::ImuData*>(
      ::cartographer::mapping::proto::ImuData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->odometry_data_ = const_cast< ::cartographer::mapping::proto::OdometryData*>(
      ::cartographer::mapping::proto::OdometryData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->fixed_frame_pose_data_ = const_cast< ::cartographer::mapping::proto::FixedFramePoseData*>(
      ::cartographer::mapping::proto::FixedFramePoseData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->trajectory_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryData*>(
      ::cartographer::mapping::proto::TrajectoryData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->landmark_data_ = const_cast< ::cartographer::mapping::proto::LandmarkData*>(
      ::cartographer::mapping::proto::LandmarkData::internal_default_instance());
}
void LegacySerializedData::clear_submap() {
  if (GetArenaNoVirtual() == NULL && submap_ != NULL) {
    delete submap_;
  }
  submap_ = NULL;
}
void LegacySerializedData::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
}
void LegacySerializedData::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) {
    delete imu_data_;
  }
  imu_data_ = NULL;
}
void LegacySerializedData::clear_odometry_data() {
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) {
    delete odometry_data_;
  }
  odometry_data_ = NULL;
}
void LegacySerializedData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = NULL;
}
void LegacySerializedData::clear_trajectory_data() {
  if (GetArenaNoVirtual() == NULL && trajectory_data_ != NULL) {
    delete trajectory_data_;
  }
  trajectory_data_ = NULL;
}
void LegacySerializedData::clear_landmark_data() {
  if (GetArenaNoVirtual() == NULL && landmark_data_ != NULL) {
    delete landmark_data_;
  }
  landmark_data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacySerializedData::kSubmapFieldNumber;
const int LegacySerializedData::kNodeFieldNumber;
const int LegacySerializedData::kImuDataFieldNumber;
const int LegacySerializedData::kOdometryDataFieldNumber;
const int LegacySerializedData::kFixedFramePoseDataFieldNumber;
const int LegacySerializedData::kTrajectoryDataFieldNumber;
const int LegacySerializedData::kLandmarkDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacySerializedData::LegacySerializedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto::InitDefaultsLegacySerializedData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LegacySerializedData)
}
LegacySerializedData::LegacySerializedData(const LegacySerializedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap()) {
    submap_ = new ::cartographer::mapping::proto::Submap(*from.submap_);
  } else {
    submap_ = NULL;
  }
  if (from.has_node()) {
    node_ = new ::cartographer::mapping::proto::Node(*from.node_);
  } else {
    node_ = NULL;
  }
  if (from.has_imu_data()) {
    imu_data_ = new ::cartographer::mapping::proto::ImuData(*from.imu_data_);
  } else {
    imu_data_ = NULL;
  }
  if (from.has_odometry_data()) {
    odometry_data_ = new ::cartographer::mapping::proto::OdometryData(*from.odometry_data_);
  } else {
    odometry_data_ = NULL;
  }
  if (from.has_fixed_frame_pose_data()) {
    fixed_frame_pose_data_ = new ::cartographer::mapping::proto::FixedFramePoseData(*from.fixed_frame_pose_data_);
  } else {
    fixed_frame_pose_data_ = NULL;
  }
  if (from.has_trajectory_data()) {
    trajectory_data_ = new ::cartographer::mapping::proto::TrajectoryData(*from.trajectory_data_);
  } else {
    trajectory_data_ = NULL;
  }
  if (from.has_landmark_data()) {
    landmark_data_ = new ::cartographer::mapping::proto::LandmarkData(*from.landmark_data_);
  } else {
    landmark_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LegacySerializedData)
}

void LegacySerializedData::SharedCtor() {
  ::memset(&submap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&landmark_data_) -
      reinterpret_cast<char*>(&submap_)) + sizeof(landmark_data_));
  _cached_size_ = 0;
}

LegacySerializedData::~LegacySerializedData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LegacySerializedData)
  SharedDtor();
}

void LegacySerializedData::SharedDtor() {
  if (this != internal_default_instance()) delete submap_;
  if (this != internal_default_instance()) delete node_;
  if (this != internal_default_instance()) delete imu_data_;
  if (this != internal_default_instance()) delete odometry_data_;
  if (this != internal_default_instance()) delete fixed_frame_pose_data_;
  if (this != internal_default_instance()) delete trajectory_data_;
  if (this != internal_default_instance()) delete landmark_data_;
}

void LegacySerializedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegacySerializedData::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LegacySerializedData& LegacySerializedData::default_instance() {
  ::protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto::InitDefaultsLegacySerializedData();
  return *internal_default_instance();
}

LegacySerializedData* LegacySerializedData::New(::google::protobuf::Arena* arena) const {
  LegacySerializedData* n = new LegacySerializedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LegacySerializedData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LegacySerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && submap_ != NULL) {
    delete submap_;
  }
  submap_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_ != NULL) {
    delete node_;
  }
  node_ = NULL;
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) {
    delete imu_data_;
  }
  imu_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) {
    delete odometry_data_;
  }
  odometry_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && trajectory_data_ != NULL) {
    delete trajectory_data_;
  }
  trajectory_data_ = NULL;
  if (GetArenaNoVirtual() == NULL && landmark_data_ != NULL) {
    delete landmark_data_;
  }
  landmark_data_ = NULL;
  _internal_metadata_.Clear();
}

bool LegacySerializedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LegacySerializedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.Submap submap = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.Node node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.ImuData imu_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.OdometryData odometry_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_odometry_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_frame_pose_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landmark_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LegacySerializedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LegacySerializedData)
  return false;
#undef DO_
}

void LegacySerializedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LegacySerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->submap_, output);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_, output);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->imu_data_, output);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->odometry_data_, output);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->fixed_frame_pose_data_, output);
  }

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->trajectory_data_, output);
  }

  // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->landmark_data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LegacySerializedData)
}

::google::protobuf::uint8* LegacySerializedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LegacySerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->submap_, deterministic, target);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->node_, deterministic, target);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->imu_data_, deterministic, target);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->odometry_data_, deterministic, target);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->fixed_frame_pose_data_, deterministic, target);
  }

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->trajectory_data_, deterministic, target);
  }

  // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->landmark_data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LegacySerializedData)
  return target;
}

size_t LegacySerializedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LegacySerializedData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->submap_);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->node_);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->imu_data_);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->odometry_data_);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fixed_frame_pose_data_);
  }

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->trajectory_data_);
  }

  // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->landmark_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegacySerializedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LegacySerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  const LegacySerializedData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LegacySerializedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LegacySerializedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LegacySerializedData)
    MergeFrom(*source);
  }
}

void LegacySerializedData::MergeFrom(const LegacySerializedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LegacySerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap()) {
    mutable_submap()->::cartographer::mapping::proto::Submap::MergeFrom(from.submap());
  }
  if (from.has_node()) {
    mutable_node()->::cartographer::mapping::proto::Node::MergeFrom(from.node());
  }
  if (from.has_imu_data()) {
    mutable_imu_data()->::cartographer::mapping::proto::ImuData::MergeFrom(from.imu_data());
  }
  if (from.has_odometry_data()) {
    mutable_odometry_data()->::cartographer::mapping::proto::OdometryData::MergeFrom(from.odometry_data());
  }
  if (from.has_fixed_frame_pose_data()) {
    mutable_fixed_frame_pose_data()->::cartographer::mapping::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
  }
  if (from.has_trajectory_data()) {
    mutable_trajectory_data()->::cartographer::mapping::proto::TrajectoryData::MergeFrom(from.trajectory_data());
  }
  if (from.has_landmark_data()) {
    mutable_landmark_data()->::cartographer::mapping::proto::LandmarkData::MergeFrom(from.landmark_data());
  }
}

void LegacySerializedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LegacySerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacySerializedData::CopyFrom(const LegacySerializedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LegacySerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacySerializedData::IsInitialized() const {
  return true;
}

void LegacySerializedData::Swap(LegacySerializedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacySerializedData::InternalSwap(LegacySerializedData* other) {
  using std::swap;
  swap(submap_, other->submap_);
  swap(node_, other->node_);
  swap(imu_data_, other->imu_data_);
  swap(odometry_data_, other->odometry_data_);
  swap(fixed_frame_pose_data_, other->fixed_frame_pose_data_);
  swap(trajectory_data_, other->trajectory_data_);
  swap(landmark_data_, other->landmark_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LegacySerializedData::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
