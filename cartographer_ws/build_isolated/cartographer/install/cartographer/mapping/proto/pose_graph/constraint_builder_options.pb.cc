// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph/constraint_builder_options.proto

#include "cartographer/mapping/proto/pose_graph/constraint_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace constraints {
namespace proto {
class ConstraintBuilderOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConstraintBuilderOptions>
      _instance;
} _ConstraintBuilderOptions_default_instance_;
}  // namespace proto
}  // namespace constraints
}  // namespace mapping
}  // namespace cartographer
namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto {
void InitDefaultsConstraintBuilderOptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto::InitDefaultsFastCorrelativeScanMatcherOptions2D();
  protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto::InitDefaultsCeresScanMatcherOptions2D();
  protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto::InitDefaultsFastCorrelativeScanMatcherOptions3D();
  protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto::InitDefaultsCeresScanMatcherOptions3D();
  {
    void* ptr = &::cartographer::mapping::constraints::proto::_ConstraintBuilderOptions_default_instance_;
    new (ptr) ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions::InitAsDefaultInstance();
}

void InitDefaultsConstraintBuilderOptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsConstraintBuilderOptionsImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, sampling_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, max_constraint_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, min_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, global_localization_min_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, loop_closure_translation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, loop_closure_rotation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, log_matches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, fast_correlative_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, ceres_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, fast_correlative_scan_matcher_options_3d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions, ceres_scan_matcher_options_3d_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::constraints::proto::ConstraintBuilderOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::constraints::proto::_ConstraintBuilderOptions_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/pose_graph/constraint_builder_options.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nFcartographer/mapping/proto/pose_graph/"
      "constraint_builder_options.proto\022&cartog"
      "rapher.mapping.constraints.proto\032Lcartog"
      "rapher/mapping/proto/scan_matching/ceres"
      "_scan_matcher_options_2d.proto\032Lcartogra"
      "pher/mapping/proto/scan_matching/ceres_s"
      "can_matcher_options_3d.proto\032Wcartograph"
      "er/mapping/proto/scan_matching/fast_corr"
      "elative_scan_matcher_options_2d.proto\032Wc"
      "artographer/mapping/proto/scan_matching/"
      "fast_correlative_scan_matcher_options_3d"
      ".proto\"\305\005\n\030ConstraintBuilderOptions\022\026\n\016s"
      "ampling_ratio\030\001 \001(\001\022\037\n\027max_constraint_di"
      "stance\030\002 \001(\001\022\021\n\tmin_score\030\004 \001(\001\022%\n\035globa"
      "l_localization_min_score\030\005 \001(\001\022\'\n\037loop_c"
      "losure_translation_weight\030\r \001(\001\022$\n\034loop_"
      "closure_rotation_weight\030\016 \001(\001\022\023\n\013log_mat"
      "ches\030\010 \001(\010\022|\n%fast_correlative_scan_matc"
      "her_options\030\t \001(\0132M.cartographer.mapping"
      ".scan_matching.proto.FastCorrelativeScan"
      "MatcherOptions2D\022g\n\032ceres_scan_matcher_o"
      "ptions\030\013 \001(\0132C.cartographer.mapping.scan"
      "_matching.proto.CeresScanMatcherOptions2"
      "D\022\177\n(fast_correlative_scan_matcher_optio"
      "ns_3d\030\n \001(\0132M.cartographer.mapping.scan_"
      "matching.proto.FastCorrelativeScanMatche"
      "rOptions3D\022j\n\035ceres_scan_matcher_options"
      "_3d\030\014 \001(\0132C.cartographer.mapping.scan_ma"
      "tching.proto.CeresScanMatcherOptions3Db\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/pose_graph/constraint_builder_options.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f2d_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto
namespace cartographer {
namespace mapping {
namespace constraints {
namespace proto {

// ===================================================================

void ConstraintBuilderOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::constraints::proto::_ConstraintBuilderOptions_default_instance_._instance.get_mutable()->fast_correlative_scan_matcher_options_ = const_cast< ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D*>(
      ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D::internal_default_instance());
  ::cartographer::mapping::constraints::proto::_ConstraintBuilderOptions_default_instance_._instance.get_mutable()->ceres_scan_matcher_options_ = const_cast< ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D*>(
      ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D::internal_default_instance());
  ::cartographer::mapping::constraints::proto::_ConstraintBuilderOptions_default_instance_._instance.get_mutable()->fast_correlative_scan_matcher_options_3d_ = const_cast< ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D*>(
      ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D::internal_default_instance());
  ::cartographer::mapping::constraints::proto::_ConstraintBuilderOptions_default_instance_._instance.get_mutable()->ceres_scan_matcher_options_3d_ = const_cast< ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D*>(
      ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D::internal_default_instance());
}
void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && fast_correlative_scan_matcher_options_ != NULL) {
    delete fast_correlative_scan_matcher_options_;
  }
  fast_correlative_scan_matcher_options_ = NULL;
}
void ConstraintBuilderOptions::clear_ceres_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) {
    delete ceres_scan_matcher_options_;
  }
  ceres_scan_matcher_options_ = NULL;
}
void ConstraintBuilderOptions::clear_fast_correlative_scan_matcher_options_3d() {
  if (GetArenaNoVirtual() == NULL && fast_correlative_scan_matcher_options_3d_ != NULL) {
    delete fast_correlative_scan_matcher_options_3d_;
  }
  fast_correlative_scan_matcher_options_3d_ = NULL;
}
void ConstraintBuilderOptions::clear_ceres_scan_matcher_options_3d() {
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_3d_ != NULL) {
    delete ceres_scan_matcher_options_3d_;
  }
  ceres_scan_matcher_options_3d_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstraintBuilderOptions::kSamplingRatioFieldNumber;
const int ConstraintBuilderOptions::kMaxConstraintDistanceFieldNumber;
const int ConstraintBuilderOptions::kMinScoreFieldNumber;
const int ConstraintBuilderOptions::kGlobalLocalizationMinScoreFieldNumber;
const int ConstraintBuilderOptions::kLoopClosureTranslationWeightFieldNumber;
const int ConstraintBuilderOptions::kLoopClosureRotationWeightFieldNumber;
const int ConstraintBuilderOptions::kLogMatchesFieldNumber;
const int ConstraintBuilderOptions::kFastCorrelativeScanMatcherOptionsFieldNumber;
const int ConstraintBuilderOptions::kCeresScanMatcherOptionsFieldNumber;
const int ConstraintBuilderOptions::kFastCorrelativeScanMatcherOptions3DFieldNumber;
const int ConstraintBuilderOptions::kCeresScanMatcherOptions3DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstraintBuilderOptions::ConstraintBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto::InitDefaultsConstraintBuilderOptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
}
ConstraintBuilderOptions::ConstraintBuilderOptions(const ConstraintBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fast_correlative_scan_matcher_options()) {
    fast_correlative_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D(*from.fast_correlative_scan_matcher_options_);
  } else {
    fast_correlative_scan_matcher_options_ = NULL;
  }
  if (from.has_fast_correlative_scan_matcher_options_3d()) {
    fast_correlative_scan_matcher_options_3d_ = new ::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D(*from.fast_correlative_scan_matcher_options_3d_);
  } else {
    fast_correlative_scan_matcher_options_3d_ = NULL;
  }
  if (from.has_ceres_scan_matcher_options()) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D(*from.ceres_scan_matcher_options_);
  } else {
    ceres_scan_matcher_options_ = NULL;
  }
  if (from.has_ceres_scan_matcher_options_3d()) {
    ceres_scan_matcher_options_3d_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D(*from.ceres_scan_matcher_options_3d_);
  } else {
    ceres_scan_matcher_options_3d_ = NULL;
  }
  ::memcpy(&sampling_ratio_, &from.sampling_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&loop_closure_rotation_weight_) -
    reinterpret_cast<char*>(&sampling_ratio_)) + sizeof(loop_closure_rotation_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
}

void ConstraintBuilderOptions::SharedCtor() {
  ::memset(&fast_correlative_scan_matcher_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loop_closure_rotation_weight_) -
      reinterpret_cast<char*>(&fast_correlative_scan_matcher_options_)) + sizeof(loop_closure_rotation_weight_));
  _cached_size_ = 0;
}

ConstraintBuilderOptions::~ConstraintBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  SharedDtor();
}

void ConstraintBuilderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete fast_correlative_scan_matcher_options_;
  if (this != internal_default_instance()) delete fast_correlative_scan_matcher_options_3d_;
  if (this != internal_default_instance()) delete ceres_scan_matcher_options_;
  if (this != internal_default_instance()) delete ceres_scan_matcher_options_3d_;
}

void ConstraintBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstraintBuilderOptions::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConstraintBuilderOptions& ConstraintBuilderOptions::default_instance() {
  ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto::InitDefaultsConstraintBuilderOptions();
  return *internal_default_instance();
}

ConstraintBuilderOptions* ConstraintBuilderOptions::New(::google::protobuf::Arena* arena) const {
  ConstraintBuilderOptions* n = new ConstraintBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConstraintBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && fast_correlative_scan_matcher_options_ != NULL) {
    delete fast_correlative_scan_matcher_options_;
  }
  fast_correlative_scan_matcher_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && fast_correlative_scan_matcher_options_3d_ != NULL) {
    delete fast_correlative_scan_matcher_options_3d_;
  }
  fast_correlative_scan_matcher_options_3d_ = NULL;
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) {
    delete ceres_scan_matcher_options_;
  }
  ceres_scan_matcher_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_3d_ != NULL) {
    delete ceres_scan_matcher_options_3d_;
  }
  ceres_scan_matcher_options_3d_ = NULL;
  ::memset(&sampling_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loop_closure_rotation_weight_) -
      reinterpret_cast<char*>(&sampling_ratio_)) + sizeof(loop_closure_rotation_weight_));
  _internal_metadata_.Clear();
}

bool ConstraintBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double sampling_ratio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sampling_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_constraint_distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_constraint_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double global_localization_min_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &global_localization_min_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool log_matches = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fast_correlative_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fast_correlative_scan_matcher_options_3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ceres_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ceres_scan_matcher_options_3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loop_closure_translation_weight = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loop_closure_translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double loop_closure_rotation_weight = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loop_closure_rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  return false;
#undef DO_
}

void ConstraintBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double sampling_ratio = 1;
  if (this->sampling_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sampling_ratio(), output);
  }

  // double max_constraint_distance = 2;
  if (this->max_constraint_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_constraint_distance(), output);
  }

  // double min_score = 4;
  if (this->min_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_score(), output);
  }

  // double global_localization_min_score = 5;
  if (this->global_localization_min_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->global_localization_min_score(), output);
  }

  // bool log_matches = 8;
  if (this->log_matches() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->log_matches(), output);
  }

  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
  if (this->has_fast_correlative_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->fast_correlative_scan_matcher_options_, output);
  }

  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
  if (this->has_fast_correlative_scan_matcher_options_3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->fast_correlative_scan_matcher_options_3d_, output);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
  if (this->has_ceres_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->ceres_scan_matcher_options_, output);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
  if (this->has_ceres_scan_matcher_options_3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->ceres_scan_matcher_options_3d_, output);
  }

  // double loop_closure_translation_weight = 13;
  if (this->loop_closure_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->loop_closure_translation_weight(), output);
  }

  // double loop_closure_rotation_weight = 14;
  if (this->loop_closure_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->loop_closure_rotation_weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
}

::google::protobuf::uint8* ConstraintBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double sampling_ratio = 1;
  if (this->sampling_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sampling_ratio(), target);
  }

  // double max_constraint_distance = 2;
  if (this->max_constraint_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_constraint_distance(), target);
  }

  // double min_score = 4;
  if (this->min_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_score(), target);
  }

  // double global_localization_min_score = 5;
  if (this->global_localization_min_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->global_localization_min_score(), target);
  }

  // bool log_matches = 8;
  if (this->log_matches() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->log_matches(), target);
  }

  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
  if (this->has_fast_correlative_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->fast_correlative_scan_matcher_options_, deterministic, target);
  }

  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
  if (this->has_fast_correlative_scan_matcher_options_3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->fast_correlative_scan_matcher_options_3d_, deterministic, target);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
  if (this->has_ceres_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->ceres_scan_matcher_options_, deterministic, target);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
  if (this->has_ceres_scan_matcher_options_3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->ceres_scan_matcher_options_3d_, deterministic, target);
  }

  // double loop_closure_translation_weight = 13;
  if (this->loop_closure_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->loop_closure_translation_weight(), target);
  }

  // double loop_closure_rotation_weight = 14;
  if (this->loop_closure_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->loop_closure_rotation_weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  return target;
}

size_t ConstraintBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions2D fast_correlative_scan_matcher_options = 9;
  if (this->has_fast_correlative_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fast_correlative_scan_matcher_options_);
  }

  // .cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D fast_correlative_scan_matcher_options_3d = 10;
  if (this->has_fast_correlative_scan_matcher_options_3d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->fast_correlative_scan_matcher_options_3d_);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 11;
  if (this->has_ceres_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ceres_scan_matcher_options_);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options_3d = 12;
  if (this->has_ceres_scan_matcher_options_3d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->ceres_scan_matcher_options_3d_);
  }

  // double sampling_ratio = 1;
  if (this->sampling_ratio() != 0) {
    total_size += 1 + 8;
  }

  // double max_constraint_distance = 2;
  if (this->max_constraint_distance() != 0) {
    total_size += 1 + 8;
  }

  // double min_score = 4;
  if (this->min_score() != 0) {
    total_size += 1 + 8;
  }

  // double global_localization_min_score = 5;
  if (this->global_localization_min_score() != 0) {
    total_size += 1 + 8;
  }

  // bool log_matches = 8;
  if (this->log_matches() != 0) {
    total_size += 1 + 1;
  }

  // double loop_closure_translation_weight = 13;
  if (this->loop_closure_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double loop_closure_rotation_weight = 14;
  if (this->loop_closure_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstraintBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstraintBuilderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstraintBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
    MergeFrom(*source);
  }
}

void ConstraintBuilderOptions::MergeFrom(const ConstraintBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fast_correlative_scan_matcher_options()) {
    mutable_fast_correlative_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions2D::MergeFrom(from.fast_correlative_scan_matcher_options());
  }
  if (from.has_fast_correlative_scan_matcher_options_3d()) {
    mutable_fast_correlative_scan_matcher_options_3d()->::cartographer::mapping::scan_matching::proto::FastCorrelativeScanMatcherOptions3D::MergeFrom(from.fast_correlative_scan_matcher_options_3d());
  }
  if (from.has_ceres_scan_matcher_options()) {
    mutable_ceres_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions2D::MergeFrom(from.ceres_scan_matcher_options());
  }
  if (from.has_ceres_scan_matcher_options_3d()) {
    mutable_ceres_scan_matcher_options_3d()->::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D::MergeFrom(from.ceres_scan_matcher_options_3d());
  }
  if (from.sampling_ratio() != 0) {
    set_sampling_ratio(from.sampling_ratio());
  }
  if (from.max_constraint_distance() != 0) {
    set_max_constraint_distance(from.max_constraint_distance());
  }
  if (from.min_score() != 0) {
    set_min_score(from.min_score());
  }
  if (from.global_localization_min_score() != 0) {
    set_global_localization_min_score(from.global_localization_min_score());
  }
  if (from.log_matches() != 0) {
    set_log_matches(from.log_matches());
  }
  if (from.loop_closure_translation_weight() != 0) {
    set_loop_closure_translation_weight(from.loop_closure_translation_weight());
  }
  if (from.loop_closure_rotation_weight() != 0) {
    set_loop_closure_rotation_weight(from.loop_closure_rotation_weight());
  }
}

void ConstraintBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstraintBuilderOptions::CopyFrom(const ConstraintBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.constraints.proto.ConstraintBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstraintBuilderOptions::IsInitialized() const {
  return true;
}

void ConstraintBuilderOptions::Swap(ConstraintBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstraintBuilderOptions::InternalSwap(ConstraintBuilderOptions* other) {
  using std::swap;
  swap(fast_correlative_scan_matcher_options_, other->fast_correlative_scan_matcher_options_);
  swap(fast_correlative_scan_matcher_options_3d_, other->fast_correlative_scan_matcher_options_3d_);
  swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
  swap(ceres_scan_matcher_options_3d_, other->ceres_scan_matcher_options_3d_);
  swap(sampling_ratio_, other->sampling_ratio_);
  swap(max_constraint_distance_, other->max_constraint_distance_);
  swap(min_score_, other->min_score_);
  swap(global_localization_min_score_, other->global_localization_min_score_);
  swap(log_matches_, other->log_matches_);
  swap(loop_closure_translation_weight_, other->loop_closure_translation_weight_);
  swap(loop_closure_rotation_weight_, other->loop_closure_rotation_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConstraintBuilderOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace constraints
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
