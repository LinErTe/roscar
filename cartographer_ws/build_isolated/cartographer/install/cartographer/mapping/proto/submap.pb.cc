// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap.proto

#include "cartographer/mapping/proto/submap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace mapping {
namespace proto {
class Submap2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Submap2D>
      _instance;
} _Submap2D_default_instance_;
class Submap3DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Submap3D>
      _instance;
} _Submap3D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto {
void InitDefaultsSubmap2DImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid3d();
  protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::InitDefaultsGrid2D();
  {
    void* ptr = &::cartographer::mapping::proto::_Submap2D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Submap2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Submap2D::InitAsDefaultInstance();
}

void InitDefaultsSubmap2D() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubmap2DImpl);
}

void InitDefaultsSubmap3DImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid3d();
  protobuf_cartographer_2fmapping_2fproto_2f3d_2fhybrid_5fgrid_2eproto::InitDefaultsHybridGrid();
  {
    void* ptr = &::cartographer::mapping::proto::_Submap3D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Submap3D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Submap3D::InitAsDefaultInstance();
}

void InitDefaultsSubmap3D() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubmap3DImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap2D, local_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap2D, num_range_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap2D, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap2D, grid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, local_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, num_range_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, high_resolution_hybrid_grid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::mapping::proto::Submap3D, low_resolution_hybrid_grid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::Submap2D)},
  { 9, -1, sizeof(::cartographer::mapping::proto::Submap3D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_Submap2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_Submap3D_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/submap.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\'cartographer/mapping/proto/submap.prot"
      "o\022\032cartographer.mapping.proto\032+cartograp"
      "her/mapping/proto/2d/grid_2d.proto\032/cart"
      "ographer/mapping/proto/3d/hybrid_grid.pr"
      "oto\032,cartographer/transform/proto/transf"
      "orm.proto\"\241\001\n\010Submap2D\0229\n\nlocal_pose\030\001 \001"
      "(\0132%.cartographer.transform.proto.Rigid3"
      "d\022\026\n\016num_range_data\030\002 \001(\005\022\020\n\010finished\030\003 "
      "\001(\010\0220\n\004grid\030\004 \001(\0132\".cartographer.mapping"
      ".proto.Grid2D\"\210\002\n\010Submap3D\0229\n\nlocal_pose"
      "\030\001 \001(\0132%.cartographer.transform.proto.Ri"
      "gid3d\022\026\n\016num_range_data\030\002 \001(\005\022\020\n\010finishe"
      "d\030\003 \001(\010\022K\n\033high_resolution_hybrid_grid\030\004"
      " \001(\0132&.cartographer.mapping.proto.Hybrid"
      "Grid\022J\n\032low_resolution_hybrid_grid\030\005 \001(\013"
      "2&.cartographer.mapping.proto.HybridGrid"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 648);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/submap.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::AddDescriptors();
  ::protobuf_cartographer_2fmapping_2fproto_2f3d_2fhybrid_5fgrid_2eproto::AddDescriptors();
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void Submap2D::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_Submap2D_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  ::cartographer::mapping::proto::_Submap2D_default_instance_._instance.get_mutable()->grid_ = const_cast< ::cartographer::mapping::proto::Grid2D*>(
      ::cartographer::mapping::proto::Grid2D::internal_default_instance());
}
void Submap2D::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) {
    delete local_pose_;
  }
  local_pose_ = NULL;
}
void Submap2D::clear_grid() {
  if (GetArenaNoVirtual() == NULL && grid_ != NULL) {
    delete grid_;
  }
  grid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Submap2D::kLocalPoseFieldNumber;
const int Submap2D::kNumRangeDataFieldNumber;
const int Submap2D::kFinishedFieldNumber;
const int Submap2D::kGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Submap2D::Submap2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::InitDefaultsSubmap2D();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Submap2D)
}
Submap2D::Submap2D(const Submap2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = NULL;
  }
  if (from.has_grid()) {
    grid_ = new ::cartographer::mapping::proto::Grid2D(*from.grid_);
  } else {
    grid_ = NULL;
  }
  ::memcpy(&num_range_data_, &from.num_range_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Submap2D)
}

void Submap2D::SharedCtor() {
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(finished_));
  _cached_size_ = 0;
}

Submap2D::~Submap2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Submap2D)
  SharedDtor();
}

void Submap2D::SharedDtor() {
  if (this != internal_default_instance()) delete local_pose_;
  if (this != internal_default_instance()) delete grid_;
}

void Submap2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Submap2D::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Submap2D& Submap2D::default_instance() {
  ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::InitDefaultsSubmap2D();
  return *internal_default_instance();
}

Submap2D* Submap2D::New(::google::protobuf::Arena* arena) const {
  Submap2D* n = new Submap2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Submap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Submap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) {
    delete local_pose_;
  }
  local_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && grid_ != NULL) {
    delete grid_;
  }
  grid_ = NULL;
  ::memset(&num_range_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  _internal_metadata_.Clear();
}

bool Submap2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Submap2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_range_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_range_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool finished = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.Grid2D grid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Submap2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Submap2D)
  return false;
#undef DO_
}

void Submap2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Submap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->local_pose_, output);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_range_data(), output);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished(), output);
  }

  // .cartographer.mapping.proto.Grid2D grid = 4;
  if (this->has_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->grid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Submap2D)
}

::google::protobuf::uint8* Submap2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Submap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->local_pose_, deterministic, target);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_range_data(), target);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished(), target);
  }

  // .cartographer.mapping.proto.Grid2D grid = 4;
  if (this->has_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->grid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Submap2D)
  return target;
}

size_t Submap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Submap2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->local_pose_);
  }

  // .cartographer.mapping.proto.Grid2D grid = 4;
  if (this->has_grid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->grid_);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_range_data());
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Submap2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Submap2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Submap2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Submap2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Submap2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Submap2D)
    MergeFrom(*source);
  }
}

void Submap2D::MergeFrom(const Submap2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Submap2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose()) {
    mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
  }
  if (from.has_grid()) {
    mutable_grid()->::cartographer::mapping::proto::Grid2D::MergeFrom(from.grid());
  }
  if (from.num_range_data() != 0) {
    set_num_range_data(from.num_range_data());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
}

void Submap2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Submap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Submap2D::CopyFrom(const Submap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Submap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submap2D::IsInitialized() const {
  return true;
}

void Submap2D::Swap(Submap2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Submap2D::InternalSwap(Submap2D* other) {
  using std::swap;
  swap(local_pose_, other->local_pose_);
  swap(grid_, other->grid_);
  swap(num_range_data_, other->num_range_data_);
  swap(finished_, other->finished_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Submap2D::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Submap3D::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_Submap3D_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  ::cartographer::mapping::proto::_Submap3D_default_instance_._instance.get_mutable()->high_resolution_hybrid_grid_ = const_cast< ::cartographer::mapping::proto::HybridGrid*>(
      ::cartographer::mapping::proto::HybridGrid::internal_default_instance());
  ::cartographer::mapping::proto::_Submap3D_default_instance_._instance.get_mutable()->low_resolution_hybrid_grid_ = const_cast< ::cartographer::mapping::proto::HybridGrid*>(
      ::cartographer::mapping::proto::HybridGrid::internal_default_instance());
}
void Submap3D::clear_local_pose() {
  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) {
    delete local_pose_;
  }
  local_pose_ = NULL;
}
void Submap3D::clear_high_resolution_hybrid_grid() {
  if (GetArenaNoVirtual() == NULL && high_resolution_hybrid_grid_ != NULL) {
    delete high_resolution_hybrid_grid_;
  }
  high_resolution_hybrid_grid_ = NULL;
}
void Submap3D::clear_low_resolution_hybrid_grid() {
  if (GetArenaNoVirtual() == NULL && low_resolution_hybrid_grid_ != NULL) {
    delete low_resolution_hybrid_grid_;
  }
  low_resolution_hybrid_grid_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Submap3D::kLocalPoseFieldNumber;
const int Submap3D::kNumRangeDataFieldNumber;
const int Submap3D::kFinishedFieldNumber;
const int Submap3D::kHighResolutionHybridGridFieldNumber;
const int Submap3D::kLowResolutionHybridGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Submap3D::Submap3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::InitDefaultsSubmap3D();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Submap3D)
}
Submap3D::Submap3D(const Submap3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = NULL;
  }
  if (from.has_high_resolution_hybrid_grid()) {
    high_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid(*from.high_resolution_hybrid_grid_);
  } else {
    high_resolution_hybrid_grid_ = NULL;
  }
  if (from.has_low_resolution_hybrid_grid()) {
    low_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid(*from.low_resolution_hybrid_grid_);
  } else {
    low_resolution_hybrid_grid_ = NULL;
  }
  ::memcpy(&num_range_data_, &from.num_range_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Submap3D)
}

void Submap3D::SharedCtor() {
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(finished_));
  _cached_size_ = 0;
}

Submap3D::~Submap3D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Submap3D)
  SharedDtor();
}

void Submap3D::SharedDtor() {
  if (this != internal_default_instance()) delete local_pose_;
  if (this != internal_default_instance()) delete high_resolution_hybrid_grid_;
  if (this != internal_default_instance()) delete low_resolution_hybrid_grid_;
}

void Submap3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Submap3D::descriptor() {
  ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Submap3D& Submap3D::default_instance() {
  ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::InitDefaultsSubmap3D();
  return *internal_default_instance();
}

Submap3D* Submap3D::New(::google::protobuf::Arena* arena) const {
  Submap3D* n = new Submap3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Submap3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Submap3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && local_pose_ != NULL) {
    delete local_pose_;
  }
  local_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && high_resolution_hybrid_grid_ != NULL) {
    delete high_resolution_hybrid_grid_;
  }
  high_resolution_hybrid_grid_ = NULL;
  if (GetArenaNoVirtual() == NULL && low_resolution_hybrid_grid_ != NULL) {
    delete low_resolution_hybrid_grid_;
  }
  low_resolution_hybrid_grid_ = NULL;
  ::memset(&num_range_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  _internal_metadata_.Clear();
}

bool Submap3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Submap3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_range_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_range_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool finished = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_high_resolution_hybrid_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_low_resolution_hybrid_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Submap3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Submap3D)
  return false;
#undef DO_
}

void Submap3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Submap3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->local_pose_, output);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_range_data(), output);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished(), output);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->has_high_resolution_hybrid_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->high_resolution_hybrid_grid_, output);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->has_low_resolution_hybrid_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->low_resolution_hybrid_grid_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Submap3D)
}

::google::protobuf::uint8* Submap3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Submap3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->local_pose_, deterministic, target);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_range_data(), target);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished(), target);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->has_high_resolution_hybrid_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->high_resolution_hybrid_grid_, deterministic, target);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->has_low_resolution_hybrid_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->low_resolution_hybrid_grid_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Submap3D)
  return target;
}

size_t Submap3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Submap3D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->local_pose_);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->has_high_resolution_hybrid_grid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->high_resolution_hybrid_grid_);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->has_low_resolution_hybrid_grid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->low_resolution_hybrid_grid_);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_range_data());
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Submap3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Submap3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Submap3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Submap3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Submap3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Submap3D)
    MergeFrom(*source);
  }
}

void Submap3D::MergeFrom(const Submap3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Submap3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose()) {
    mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
  }
  if (from.has_high_resolution_hybrid_grid()) {
    mutable_high_resolution_hybrid_grid()->::cartographer::mapping::proto::HybridGrid::MergeFrom(from.high_resolution_hybrid_grid());
  }
  if (from.has_low_resolution_hybrid_grid()) {
    mutable_low_resolution_hybrid_grid()->::cartographer::mapping::proto::HybridGrid::MergeFrom(from.low_resolution_hybrid_grid());
  }
  if (from.num_range_data() != 0) {
    set_num_range_data(from.num_range_data());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
}

void Submap3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Submap3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Submap3D::CopyFrom(const Submap3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Submap3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Submap3D::IsInitialized() const {
  return true;
}

void Submap3D::Swap(Submap3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Submap3D::InternalSwap(Submap3D* other) {
  using std::swap;
  swap(local_pose_, other->local_pose_);
  swap(high_resolution_hybrid_grid_, other->high_resolution_hybrid_grid_);
  swap(low_resolution_hybrid_grid_, other->low_resolution_hybrid_grid_);
  swap(num_range_data_, other->num_range_data_);
  swap(finished_, other->finished_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Submap3D::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fmapping_2fproto_2fsubmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
