// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/common/proto/ceres_solver_options.proto

#include "cartographer/common/proto/ceres_solver_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace common {
namespace proto {
class CeresSolverOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CeresSolverOptions>
      _instance;
} _CeresSolverOptions_default_instance_;
}  // namespace proto
}  // namespace common
}  // namespace cartographer
namespace protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto {
void InitDefaultsCeresSolverOptionsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cartographer::common::proto::_CeresSolverOptions_default_instance_;
    new (ptr) ::cartographer::common::proto::CeresSolverOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::common::proto::CeresSolverOptions::InitAsDefaultInstance();
}

void InitDefaultsCeresSolverOptions() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCeresSolverOptionsImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::common::proto::CeresSolverOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::common::proto::CeresSolverOptions, use_nonmonotonic_steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::common::proto::CeresSolverOptions, max_num_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::common::proto::CeresSolverOptions, num_threads_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::common::proto::CeresSolverOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::common::proto::_CeresSolverOptions_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/common/proto/ceres_solver_options.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n4cartographer/common/proto/ceres_solver"
      "_options.proto\022\031cartographer.common.prot"
      "o\"e\n\022CeresSolverOptions\022\036\n\026use_nonmonoto"
      "nic_steps\030\001 \001(\010\022\032\n\022max_num_iterations\030\002 "
      "\001(\005\022\023\n\013num_threads\030\003 \001(\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 192);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/common/proto/ceres_solver_options.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto
namespace cartographer {
namespace common {
namespace proto {

// ===================================================================

void CeresSolverOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CeresSolverOptions::kUseNonmonotonicStepsFieldNumber;
const int CeresSolverOptions::kMaxNumIterationsFieldNumber;
const int CeresSolverOptions::kNumThreadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CeresSolverOptions::CeresSolverOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto::InitDefaultsCeresSolverOptions();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.common.proto.CeresSolverOptions)
}
CeresSolverOptions::CeresSolverOptions(const CeresSolverOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_nonmonotonic_steps_, &from.use_nonmonotonic_steps_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_threads_) -
    reinterpret_cast<char*>(&use_nonmonotonic_steps_)) + sizeof(num_threads_));
  // @@protoc_insertion_point(copy_constructor:cartographer.common.proto.CeresSolverOptions)
}

void CeresSolverOptions::SharedCtor() {
  ::memset(&use_nonmonotonic_steps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_threads_) -
      reinterpret_cast<char*>(&use_nonmonotonic_steps_)) + sizeof(num_threads_));
  _cached_size_ = 0;
}

CeresSolverOptions::~CeresSolverOptions() {
  // @@protoc_insertion_point(destructor:cartographer.common.proto.CeresSolverOptions)
  SharedDtor();
}

void CeresSolverOptions::SharedDtor() {
}

void CeresSolverOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CeresSolverOptions::descriptor() {
  ::protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CeresSolverOptions& CeresSolverOptions::default_instance() {
  ::protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto::InitDefaultsCeresSolverOptions();
  return *internal_default_instance();
}

CeresSolverOptions* CeresSolverOptions::New(::google::protobuf::Arena* arena) const {
  CeresSolverOptions* n = new CeresSolverOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CeresSolverOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.common.proto.CeresSolverOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&use_nonmonotonic_steps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_threads_) -
      reinterpret_cast<char*>(&use_nonmonotonic_steps_)) + sizeof(num_threads_));
  _internal_metadata_.Clear();
}

bool CeresSolverOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.common.proto.CeresSolverOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool use_nonmonotonic_steps = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_nonmonotonic_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_num_iterations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_threads = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.common.proto.CeresSolverOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.common.proto.CeresSolverOptions)
  return false;
#undef DO_
}

void CeresSolverOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.common.proto.CeresSolverOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_nonmonotonic_steps = 1;
  if (this->use_nonmonotonic_steps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_nonmonotonic_steps(), output);
  }

  // int32 max_num_iterations = 2;
  if (this->max_num_iterations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_num_iterations(), output);
  }

  // int32 num_threads = 3;
  if (this->num_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_threads(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.common.proto.CeresSolverOptions)
}

::google::protobuf::uint8* CeresSolverOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.common.proto.CeresSolverOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_nonmonotonic_steps = 1;
  if (this->use_nonmonotonic_steps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_nonmonotonic_steps(), target);
  }

  // int32 max_num_iterations = 2;
  if (this->max_num_iterations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_num_iterations(), target);
  }

  // int32 num_threads = 3;
  if (this->num_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_threads(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.common.proto.CeresSolverOptions)
  return target;
}

size_t CeresSolverOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.common.proto.CeresSolverOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool use_nonmonotonic_steps = 1;
  if (this->use_nonmonotonic_steps() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_num_iterations = 2;
  if (this->max_num_iterations() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_num_iterations());
  }

  // int32 num_threads = 3;
  if (this->num_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_threads());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CeresSolverOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.common.proto.CeresSolverOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CeresSolverOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CeresSolverOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.common.proto.CeresSolverOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.common.proto.CeresSolverOptions)
    MergeFrom(*source);
  }
}

void CeresSolverOptions::MergeFrom(const CeresSolverOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.common.proto.CeresSolverOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.use_nonmonotonic_steps() != 0) {
    set_use_nonmonotonic_steps(from.use_nonmonotonic_steps());
  }
  if (from.max_num_iterations() != 0) {
    set_max_num_iterations(from.max_num_iterations());
  }
  if (from.num_threads() != 0) {
    set_num_threads(from.num_threads());
  }
}

void CeresSolverOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.common.proto.CeresSolverOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CeresSolverOptions::CopyFrom(const CeresSolverOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.common.proto.CeresSolverOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CeresSolverOptions::IsInitialized() const {
  return true;
}

void CeresSolverOptions::Swap(CeresSolverOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CeresSolverOptions::InternalSwap(CeresSolverOptions* other) {
  using std::swap;
  swap(use_nonmonotonic_steps_, other->use_nonmonotonic_steps_);
  swap(max_num_iterations_, other->max_num_iterations_);
  swap(num_threads_, other->num_threads_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CeresSolverOptions::GetMetadata() const {
  protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace common
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
