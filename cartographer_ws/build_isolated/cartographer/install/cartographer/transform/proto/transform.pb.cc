// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/transform/proto/transform.proto

#include "cartographer/transform/proto/transform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace transform {
namespace proto {
class Vector2dDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector2d>
      _instance;
} _Vector2d_default_instance_;
class Vector2fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector2f>
      _instance;
} _Vector2f_default_instance_;
class Vector3dDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector3d>
      _instance;
} _Vector3d_default_instance_;
class Vector3fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector3f>
      _instance;
} _Vector3f_default_instance_;
class Vector4fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector4f>
      _instance;
} _Vector4f_default_instance_;
class QuaterniondDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quaterniond>
      _instance;
} _Quaterniond_default_instance_;
class QuaternionfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quaternionf>
      _instance;
} _Quaternionf_default_instance_;
class Rigid2dDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rigid2d>
      _instance;
} _Rigid2d_default_instance_;
class Rigid2fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rigid2f>
      _instance;
} _Rigid2f_default_instance_;
class Rigid3dDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rigid3d>
      _instance;
} _Rigid3d_default_instance_;
class Rigid3fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rigid3f>
      _instance;
} _Rigid3f_default_instance_;
}  // namespace proto
}  // namespace transform
}  // namespace cartographer
namespace protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto {
void InitDefaultsVector2dImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cartographer::transform::proto::_Vector2d_default_instance_;
    new (ptr) ::cartographer::transform::proto::Vector2d();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Vector2d::InitAsDefaultInstance();
}

void InitDefaultsVector2d() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector2dImpl);
}

void InitDefaultsVector2fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cartographer::transform::proto::_Vector2f_default_instance_;
    new (ptr) ::cartographer::transform::proto::Vector2f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Vector2f::InitAsDefaultInstance();
}

void InitDefaultsVector2f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector2fImpl);
}

void InitDefaultsVector3dImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cartographer::transform::proto::_Vector3d_default_instance_;
    new (ptr) ::cartographer::transform::proto::Vector3d();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Vector3d::InitAsDefaultInstance();
}

void InitDefaultsVector3d() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector3dImpl);
}

void InitDefaultsVector3fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cartographer::transform::proto::_Vector3f_default_instance_;
    new (ptr) ::cartographer::transform::proto::Vector3f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Vector3f::InitAsDefaultInstance();
}

void InitDefaultsVector3f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector3fImpl);
}

void InitDefaultsVector4fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cartographer::transform::proto::_Vector4f_default_instance_;
    new (ptr) ::cartographer::transform::proto::Vector4f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Vector4f::InitAsDefaultInstance();
}

void InitDefaultsVector4f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector4fImpl);
}

void InitDefaultsQuaterniondImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cartographer::transform::proto::_Quaterniond_default_instance_;
    new (ptr) ::cartographer::transform::proto::Quaterniond();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Quaterniond::InitAsDefaultInstance();
}

void InitDefaultsQuaterniond() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuaterniondImpl);
}

void InitDefaultsQuaternionfImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::cartographer::transform::proto::_Quaternionf_default_instance_;
    new (ptr) ::cartographer::transform::proto::Quaternionf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Quaternionf::InitAsDefaultInstance();
}

void InitDefaultsQuaternionf() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuaternionfImpl);
}

void InitDefaultsRigid2dImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector2d();
  {
    void* ptr = &::cartographer::transform::proto::_Rigid2d_default_instance_;
    new (ptr) ::cartographer::transform::proto::Rigid2d();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Rigid2d::InitAsDefaultInstance();
}

void InitDefaultsRigid2d() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRigid2dImpl);
}

void InitDefaultsRigid2fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector2f();
  {
    void* ptr = &::cartographer::transform::proto::_Rigid2f_default_instance_;
    new (ptr) ::cartographer::transform::proto::Rigid2f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Rigid2f::InitAsDefaultInstance();
}

void InitDefaultsRigid2f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRigid2fImpl);
}

void InitDefaultsRigid3dImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector3d();
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsQuaterniond();
  {
    void* ptr = &::cartographer::transform::proto::_Rigid3d_default_instance_;
    new (ptr) ::cartographer::transform::proto::Rigid3d();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Rigid3d::InitAsDefaultInstance();
}

void InitDefaultsRigid3d() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRigid3dImpl);
}

void InitDefaultsRigid3fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector3f();
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsQuaternionf();
  {
    void* ptr = &::cartographer::transform::proto::_Rigid3f_default_instance_;
    new (ptr) ::cartographer::transform::proto::Rigid3f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::transform::proto::Rigid3f::InitAsDefaultInstance();
}

void InitDefaultsRigid3f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRigid3fImpl);
}

::google::protobuf::Metadata file_level_metadata[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector2d, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector2d, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector2f, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector2f, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector3d, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector3d, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector3d, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector3f, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector3f, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector3f, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector4f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector4f, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector4f, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector4f, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Vector4f, t_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Quaterniond, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Quaterniond, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Quaterniond, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Quaterniond, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Quaterniond, w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Quaternionf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Quaternionf, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Quaternionf, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Quaternionf, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Quaternionf, w_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid2d, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid2d, rotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid2f, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid2f, rotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid3d, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid3d, rotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid3f, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::transform::proto::Rigid3f, rotation_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::transform::proto::Vector2d)},
  { 7, -1, sizeof(::cartographer::transform::proto::Vector2f)},
  { 14, -1, sizeof(::cartographer::transform::proto::Vector3d)},
  { 22, -1, sizeof(::cartographer::transform::proto::Vector3f)},
  { 30, -1, sizeof(::cartographer::transform::proto::Vector4f)},
  { 39, -1, sizeof(::cartographer::transform::proto::Quaterniond)},
  { 48, -1, sizeof(::cartographer::transform::proto::Quaternionf)},
  { 57, -1, sizeof(::cartographer::transform::proto::Rigid2d)},
  { 64, -1, sizeof(::cartographer::transform::proto::Rigid2f)},
  { 71, -1, sizeof(::cartographer::transform::proto::Rigid3d)},
  { 78, -1, sizeof(::cartographer::transform::proto::Rigid3f)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Vector2d_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Vector2f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Vector3d_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Vector3f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Vector4f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Quaterniond_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Quaternionf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Rigid2d_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Rigid2f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Rigid3d_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::transform::proto::_Rigid3f_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/transform/proto/transform.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n,cartographer/transform/proto/transform"
      ".proto\022\034cartographer.transform.proto\" \n\010"
      "Vector2d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\" \n\010Vector"
      "2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"+\n\010Vector3d\022\t\n\001"
      "x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"+\n\010Vector3"
      "f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"6\n\010Ve"
      "ctor4f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022"
      "\t\n\001t\030\004 \001(\002\"9\n\013Quaterniond\022\t\n\001x\030\001 \001(\001\022\t\n\001"
      "y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004 \001(\001\"9\n\013Quatern"
      "ionf\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n"
      "\001w\030\004 \001(\002\"X\n\007Rigid2d\022;\n\013translation\030\001 \001(\013"
      "2&.cartographer.transform.proto.Vector2d"
      "\022\020\n\010rotation\030\002 \001(\001\"X\n\007Rigid2f\022;\n\013transla"
      "tion\030\001 \001(\0132&.cartographer.transform.prot"
      "o.Vector2f\022\020\n\010rotation\030\002 \001(\002\"\203\001\n\007Rigid3d"
      "\022;\n\013translation\030\001 \001(\0132&.cartographer.tra"
      "nsform.proto.Vector3d\022;\n\010rotation\030\002 \001(\0132"
      ").cartographer.transform.proto.Quaternio"
      "nd\"\203\001\n\007Rigid3f\022;\n\013translation\030\001 \001(\0132&.ca"
      "rtographer.transform.proto.Vector3f\022;\n\010r"
      "otation\030\002 \001(\0132).cartographer.transform.p"
      "roto.Quaternionfb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 864);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/transform/proto/transform.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto
namespace cartographer {
namespace transform {
namespace proto {

// ===================================================================

void Vector2d::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2d::kXFieldNumber;
const int Vector2d::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2d::Vector2d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector2d();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Vector2d)
}
Vector2d::Vector2d(const Vector2d& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Vector2d)
}

void Vector2d::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

Vector2d::~Vector2d() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Vector2d)
  SharedDtor();
}

void Vector2d::SharedDtor() {
}

void Vector2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2d::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector2d& Vector2d::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector2d();
  return *internal_default_instance();
}

Vector2d* Vector2d::New(::google::protobuf::Arena* arena) const {
  Vector2d* n = new Vector2d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2d::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Vector2d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Vector2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Vector2d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Vector2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Vector2d)
  return false;
#undef DO_
}

void Vector2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Vector2d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Vector2d)
}

::google::protobuf::uint8* Vector2d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Vector2d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Vector2d)
  return target;
}

size_t Vector2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Vector2d)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Vector2d)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Vector2d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Vector2d)
    MergeFrom(*source);
  }
}

void Vector2d::MergeFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Vector2d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vector2d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2d::CopyFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2d::IsInitialized() const {
  return true;
}

void Vector2d::Swap(Vector2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2d::InternalSwap(Vector2d* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2d::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector2f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2f::kXFieldNumber;
const int Vector2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2f::Vector2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector2f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Vector2f)
}

void Vector2f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Vector2f)
  SharedDtor();
}

void Vector2f::SharedDtor() {
}

void Vector2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2f::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector2f& Vector2f::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector2f();
  return *internal_default_instance();
}

Vector2f* Vector2f::New(::google::protobuf::Arena* arena) const {
  Vector2f* n = new Vector2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Vector2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Vector2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Vector2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Vector2f)
  return false;
#undef DO_
}

void Vector2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Vector2f)
}

::google::protobuf::uint8* Vector2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Vector2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Vector2f)
  return target;
}

size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Vector2f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Vector2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Vector2f)
    MergeFrom(*source);
  }
}

void Vector2f::MergeFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Vector2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vector2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  return true;
}

void Vector2f::Swap(Vector2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2f::InternalSwap(Vector2f* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector3d::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3d::Vector3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector3d();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Vector3d)
}
Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Vector3d)
}

void Vector3d::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Vector3d)
  SharedDtor();
}

void Vector3d::SharedDtor() {
}

void Vector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3d& Vector3d::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector3d();
  return *internal_default_instance();
}

Vector3d* Vector3d::New(::google::protobuf::Arena* arena) const {
  Vector3d* n = new Vector3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Vector3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Vector3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Vector3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Vector3d)
  return false;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Vector3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Vector3d)
}

::google::protobuf::uint8* Vector3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Vector3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Vector3d)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Vector3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Vector3d)
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Vector3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3d::InternalSwap(Vector3d* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector3f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3f::kXFieldNumber;
const int Vector3f::kYFieldNumber;
const int Vector3f::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3f::Vector3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector3f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Vector3f)
}
Vector3f::Vector3f(const Vector3f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Vector3f)
}

void Vector3f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3f::~Vector3f() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Vector3f)
  SharedDtor();
}

void Vector3f::SharedDtor() {
}

void Vector3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3f::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3f& Vector3f::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector3f();
  return *internal_default_instance();
}

Vector3f* Vector3f::New(::google::protobuf::Arena* arena) const {
  Vector3f* n = new Vector3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3f::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Vector3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vector3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Vector3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Vector3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Vector3f)
  return false;
#undef DO_
}

void Vector3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Vector3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Vector3f)
}

::google::protobuf::uint8* Vector3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Vector3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Vector3f)
  return target;
}

size_t Vector3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Vector3f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Vector3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Vector3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Vector3f)
    MergeFrom(*source);
  }
}

void Vector3f::MergeFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Vector3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3f::CopyFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3f::IsInitialized() const {
  return true;
}

void Vector3f::Swap(Vector3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3f::InternalSwap(Vector3f* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3f::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector4f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector4f::kXFieldNumber;
const int Vector4f::kYFieldNumber;
const int Vector4f::kZFieldNumber;
const int Vector4f::kTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector4f::Vector4f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector4f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Vector4f)
}
Vector4f::Vector4f(const Vector4f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&x_)) + sizeof(t_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Vector4f)
}

void Vector4f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
  _cached_size_ = 0;
}

Vector4f::~Vector4f() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Vector4f)
  SharedDtor();
}

void Vector4f::SharedDtor() {
}

void Vector4f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector4f::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector4f& Vector4f::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsVector4f();
  return *internal_default_instance();
}

Vector4f* Vector4f::New(::google::protobuf::Arena* arena) const {
  Vector4f* n = new Vector4f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector4f::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Vector4f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&x_)) + sizeof(t_));
  _internal_metadata_.Clear();
}

bool Vector4f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Vector4f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float t = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Vector4f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Vector4f)
  return false;
#undef DO_
}

void Vector4f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Vector4f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float t = 4;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->t(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Vector4f)
}

::google::protobuf::uint8* Vector4f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Vector4f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float t = 4;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->t(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Vector4f)
  return target;
}

size_t Vector4f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Vector4f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float t = 4;
  if (this->t() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector4f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Vector4f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector4f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector4f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Vector4f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Vector4f)
    MergeFrom(*source);
  }
}

void Vector4f::MergeFrom(const Vector4f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Vector4f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
}

void Vector4f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Vector4f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector4f::CopyFrom(const Vector4f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Vector4f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4f::IsInitialized() const {
  return true;
}

void Vector4f::Swap(Vector4f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector4f::InternalSwap(Vector4f* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(t_, other->t_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector4f::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Quaterniond::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaterniond::kXFieldNumber;
const int Quaterniond::kYFieldNumber;
const int Quaterniond::kZFieldNumber;
const int Quaterniond::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaterniond::Quaterniond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsQuaterniond();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Quaterniond)
}
Quaterniond::Quaterniond(const Quaterniond& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Quaterniond)
}

void Quaterniond::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _cached_size_ = 0;
}

Quaterniond::~Quaterniond() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Quaterniond)
  SharedDtor();
}

void Quaterniond::SharedDtor() {
}

void Quaterniond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaterniond::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quaterniond& Quaterniond::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsQuaterniond();
  return *internal_default_instance();
}

Quaterniond* Quaterniond::New(::google::protobuf::Arena* arena) const {
  Quaterniond* n = new Quaterniond;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaterniond::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Quaterniond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear();
}

bool Quaterniond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Quaterniond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Quaterniond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Quaterniond)
  return false;
#undef DO_
}

void Quaterniond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Quaterniond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Quaterniond)
}

::google::protobuf::uint8* Quaterniond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Quaterniond)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Quaterniond)
  return target;
}

size_t Quaterniond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Quaterniond)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // double w = 4;
  if (this->w() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaterniond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Quaterniond)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaterniond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaterniond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Quaterniond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Quaterniond)
    MergeFrom(*source);
  }
}

void Quaterniond::MergeFrom(const Quaterniond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Quaterniond)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Quaterniond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Quaterniond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaterniond::CopyFrom(const Quaterniond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Quaterniond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaterniond::IsInitialized() const {
  return true;
}

void Quaterniond::Swap(Quaterniond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaterniond::InternalSwap(Quaterniond* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaterniond::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Quaternionf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternionf::kXFieldNumber;
const int Quaternionf::kYFieldNumber;
const int Quaternionf::kZFieldNumber;
const int Quaternionf::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternionf::Quaternionf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsQuaternionf();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Quaternionf)
}
Quaternionf::Quaternionf(const Quaternionf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Quaternionf)
}

void Quaternionf::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _cached_size_ = 0;
}

Quaternionf::~Quaternionf() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Quaternionf)
  SharedDtor();
}

void Quaternionf::SharedDtor() {
}

void Quaternionf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternionf::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quaternionf& Quaternionf::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsQuaternionf();
  return *internal_default_instance();
}

Quaternionf* Quaternionf::New(::google::protobuf::Arena* arena) const {
  Quaternionf* n = new Quaternionf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternionf::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Quaternionf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear();
}

bool Quaternionf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Quaternionf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float w = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Quaternionf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Quaternionf)
  return false;
#undef DO_
}

void Quaternionf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Quaternionf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // float w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Quaternionf)
}

::google::protobuf::uint8* Quaternionf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Quaternionf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // float w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Quaternionf)
  return target;
}

size_t Quaternionf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Quaternionf)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // float w = 4;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternionf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Quaternionf)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternionf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternionf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Quaternionf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Quaternionf)
    MergeFrom(*source);
  }
}

void Quaternionf::MergeFrom(const Quaternionf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Quaternionf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Quaternionf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Quaternionf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternionf::CopyFrom(const Quaternionf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Quaternionf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternionf::IsInitialized() const {
  return true;
}

void Quaternionf::Swap(Quaternionf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternionf::InternalSwap(Quaternionf* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaternionf::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rigid2d::InitAsDefaultInstance() {
  ::cartographer::transform::proto::_Rigid2d_default_instance_._instance.get_mutable()->translation_ = const_cast< ::cartographer::transform::proto::Vector2d*>(
      ::cartographer::transform::proto::Vector2d::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rigid2d::kTranslationFieldNumber;
const int Rigid2d::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rigid2d::Rigid2d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid2d();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Rigid2d)
}
Rigid2d::Rigid2d(const Rigid2d& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation()) {
    translation_ = new ::cartographer::transform::proto::Vector2d(*from.translation_);
  } else {
    translation_ = NULL;
  }
  rotation_ = from.rotation_;
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Rigid2d)
}

void Rigid2d::SharedCtor() {
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
  _cached_size_ = 0;
}

Rigid2d::~Rigid2d() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Rigid2d)
  SharedDtor();
}

void Rigid2d::SharedDtor() {
  if (this != internal_default_instance()) delete translation_;
}

void Rigid2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rigid2d::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rigid2d& Rigid2d::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid2d();
  return *internal_default_instance();
}

Rigid2d* Rigid2d::New(::google::protobuf::Arena* arena) const {
  Rigid2d* n = new Rigid2d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rigid2d::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Rigid2d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && translation_ != NULL) {
    delete translation_;
  }
  translation_ = NULL;
  rotation_ = 0;
  _internal_metadata_.Clear();
}

bool Rigid2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Rigid2d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Vector2d translation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Rigid2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Rigid2d)
  return false;
#undef DO_
}

void Rigid2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Rigid2d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2d translation = 1;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // double rotation = 2;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rotation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Rigid2d)
}

::google::protobuf::uint8* Rigid2d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Rigid2d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2d translation = 1;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->translation_, deterministic, target);
  }

  // double rotation = 2;
  if (this->rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rotation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Rigid2d)
  return target;
}

size_t Rigid2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Rigid2d)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Vector2d translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->translation_);
  }

  // double rotation = 2;
  if (this->rotation() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rigid2d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Rigid2d)
  GOOGLE_DCHECK_NE(&from, this);
  const Rigid2d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rigid2d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Rigid2d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Rigid2d)
    MergeFrom(*source);
  }
}

void Rigid2d::MergeFrom(const Rigid2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Rigid2d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translation()) {
    mutable_translation()->::cartographer::transform::proto::Vector2d::MergeFrom(from.translation());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
}

void Rigid2d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Rigid2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rigid2d::CopyFrom(const Rigid2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Rigid2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid2d::IsInitialized() const {
  return true;
}

void Rigid2d::Swap(Rigid2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rigid2d::InternalSwap(Rigid2d* other) {
  using std::swap;
  swap(translation_, other->translation_);
  swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rigid2d::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rigid2f::InitAsDefaultInstance() {
  ::cartographer::transform::proto::_Rigid2f_default_instance_._instance.get_mutable()->translation_ = const_cast< ::cartographer::transform::proto::Vector2f*>(
      ::cartographer::transform::proto::Vector2f::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rigid2f::kTranslationFieldNumber;
const int Rigid2f::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rigid2f::Rigid2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid2f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Rigid2f)
}
Rigid2f::Rigid2f(const Rigid2f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation()) {
    translation_ = new ::cartographer::transform::proto::Vector2f(*from.translation_);
  } else {
    translation_ = NULL;
  }
  rotation_ = from.rotation_;
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Rigid2f)
}

void Rigid2f::SharedCtor() {
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
  _cached_size_ = 0;
}

Rigid2f::~Rigid2f() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Rigid2f)
  SharedDtor();
}

void Rigid2f::SharedDtor() {
  if (this != internal_default_instance()) delete translation_;
}

void Rigid2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rigid2f::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rigid2f& Rigid2f::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid2f();
  return *internal_default_instance();
}

Rigid2f* Rigid2f::New(::google::protobuf::Arena* arena) const {
  Rigid2f* n = new Rigid2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rigid2f::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Rigid2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && translation_ != NULL) {
    delete translation_;
  }
  translation_ = NULL;
  rotation_ = 0;
  _internal_metadata_.Clear();
}

bool Rigid2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Rigid2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Vector2f translation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Rigid2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Rigid2f)
  return false;
#undef DO_
}

void Rigid2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Rigid2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2f translation = 1;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // float rotation = 2;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rotation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Rigid2f)
}

::google::protobuf::uint8* Rigid2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Rigid2f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2f translation = 1;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->translation_, deterministic, target);
  }

  // float rotation = 2;
  if (this->rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rotation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Rigid2f)
  return target;
}

size_t Rigid2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Rigid2f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Vector2f translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->translation_);
  }

  // float rotation = 2;
  if (this->rotation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rigid2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Rigid2f)
  GOOGLE_DCHECK_NE(&from, this);
  const Rigid2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rigid2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Rigid2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Rigid2f)
    MergeFrom(*source);
  }
}

void Rigid2f::MergeFrom(const Rigid2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Rigid2f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translation()) {
    mutable_translation()->::cartographer::transform::proto::Vector2f::MergeFrom(from.translation());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
}

void Rigid2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Rigid2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rigid2f::CopyFrom(const Rigid2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Rigid2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid2f::IsInitialized() const {
  return true;
}

void Rigid2f::Swap(Rigid2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rigid2f::InternalSwap(Rigid2f* other) {
  using std::swap;
  swap(translation_, other->translation_);
  swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rigid2f::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rigid3d::InitAsDefaultInstance() {
  ::cartographer::transform::proto::_Rigid3d_default_instance_._instance.get_mutable()->translation_ = const_cast< ::cartographer::transform::proto::Vector3d*>(
      ::cartographer::transform::proto::Vector3d::internal_default_instance());
  ::cartographer::transform::proto::_Rigid3d_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::cartographer::transform::proto::Quaterniond*>(
      ::cartographer::transform::proto::Quaterniond::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rigid3d::kTranslationFieldNumber;
const int Rigid3d::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rigid3d::Rigid3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid3d();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Rigid3d)
}
Rigid3d::Rigid3d(const Rigid3d& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation()) {
    translation_ = new ::cartographer::transform::proto::Vector3d(*from.translation_);
  } else {
    translation_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::cartographer::transform::proto::Quaterniond(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Rigid3d)
}

void Rigid3d::SharedCtor() {
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
  _cached_size_ = 0;
}

Rigid3d::~Rigid3d() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Rigid3d)
  SharedDtor();
}

void Rigid3d::SharedDtor() {
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Rigid3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rigid3d::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rigid3d& Rigid3d::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid3d();
  return *internal_default_instance();
}

Rigid3d* Rigid3d::New(::google::protobuf::Arena* arena) const {
  Rigid3d* n = new Rigid3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rigid3d::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Rigid3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && translation_ != NULL) {
    delete translation_;
  }
  translation_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
  _internal_metadata_.Clear();
}

bool Rigid3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Rigid3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Vector3d translation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Quaterniond rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Rigid3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Rigid3d)
  return false;
#undef DO_
}

void Rigid3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Rigid3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3d translation = 1;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // .cartographer.transform.proto.Quaterniond rotation = 2;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Rigid3d)
}

::google::protobuf::uint8* Rigid3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Rigid3d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3d translation = 1;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->translation_, deterministic, target);
  }

  // .cartographer.transform.proto.Quaterniond rotation = 2;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rotation_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Rigid3d)
  return target;
}

size_t Rigid3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Rigid3d)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Vector3d translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->translation_);
  }

  // .cartographer.transform.proto.Quaterniond rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rigid3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Rigid3d)
  GOOGLE_DCHECK_NE(&from, this);
  const Rigid3d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rigid3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Rigid3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Rigid3d)
    MergeFrom(*source);
  }
}

void Rigid3d::MergeFrom(const Rigid3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Rigid3d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translation()) {
    mutable_translation()->::cartographer::transform::proto::Vector3d::MergeFrom(from.translation());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::cartographer::transform::proto::Quaterniond::MergeFrom(from.rotation());
  }
}

void Rigid3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Rigid3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rigid3d::CopyFrom(const Rigid3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Rigid3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid3d::IsInitialized() const {
  return true;
}

void Rigid3d::Swap(Rigid3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rigid3d::InternalSwap(Rigid3d* other) {
  using std::swap;
  swap(translation_, other->translation_);
  swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rigid3d::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rigid3f::InitAsDefaultInstance() {
  ::cartographer::transform::proto::_Rigid3f_default_instance_._instance.get_mutable()->translation_ = const_cast< ::cartographer::transform::proto::Vector3f*>(
      ::cartographer::transform::proto::Vector3f::internal_default_instance());
  ::cartographer::transform::proto::_Rigid3f_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::cartographer::transform::proto::Quaternionf*>(
      ::cartographer::transform::proto::Quaternionf::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rigid3f::kTranslationFieldNumber;
const int Rigid3f::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rigid3f::Rigid3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid3f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.transform.proto.Rigid3f)
}
Rigid3f::Rigid3f(const Rigid3f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation()) {
    translation_ = new ::cartographer::transform::proto::Vector3f(*from.translation_);
  } else {
    translation_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::cartographer::transform::proto::Quaternionf(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.transform.proto.Rigid3f)
}

void Rigid3f::SharedCtor() {
  ::memset(&translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
  _cached_size_ = 0;
}

Rigid3f::~Rigid3f() {
  // @@protoc_insertion_point(destructor:cartographer.transform.proto.Rigid3f)
  SharedDtor();
}

void Rigid3f::SharedDtor() {
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Rigid3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rigid3f::descriptor() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rigid3f& Rigid3f::default_instance() {
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid3f();
  return *internal_default_instance();
}

Rigid3f* Rigid3f::New(::google::protobuf::Arena* arena) const {
  Rigid3f* n = new Rigid3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rigid3f::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.transform.proto.Rigid3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && translation_ != NULL) {
    delete translation_;
  }
  translation_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
  _internal_metadata_.Clear();
}

bool Rigid3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.transform.proto.Rigid3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Vector3f translation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Quaternionf rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.transform.proto.Rigid3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.transform.proto.Rigid3f)
  return false;
#undef DO_
}

void Rigid3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.transform.proto.Rigid3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f translation = 1;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // .cartographer.transform.proto.Quaternionf rotation = 2;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.transform.proto.Rigid3f)
}

::google::protobuf::uint8* Rigid3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.transform.proto.Rigid3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f translation = 1;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->translation_, deterministic, target);
  }

  // .cartographer.transform.proto.Quaternionf rotation = 2;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rotation_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.transform.proto.Rigid3f)
  return target;
}

size_t Rigid3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.transform.proto.Rigid3f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Vector3f translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->translation_);
  }

  // .cartographer.transform.proto.Quaternionf rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->rotation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rigid3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.transform.proto.Rigid3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Rigid3f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rigid3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.transform.proto.Rigid3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.transform.proto.Rigid3f)
    MergeFrom(*source);
  }
}

void Rigid3f::MergeFrom(const Rigid3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.transform.proto.Rigid3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_translation()) {
    mutable_translation()->::cartographer::transform::proto::Vector3f::MergeFrom(from.translation());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::cartographer::transform::proto::Quaternionf::MergeFrom(from.rotation());
  }
}

void Rigid3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.transform.proto.Rigid3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rigid3f::CopyFrom(const Rigid3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.transform.proto.Rigid3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rigid3f::IsInitialized() const {
  return true;
}

void Rigid3f::Swap(Rigid3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rigid3f::InternalSwap(Rigid3f* other) {
  using std::swap;
  swap(translation_, other->translation_);
  swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rigid3f::GetMetadata() const {
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace transform
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
