// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/ground_truth/proto/relations.proto

#include "cartographer/ground_truth/proto/relations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace cartographer {
namespace ground_truth {
namespace proto {
class RelationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Relation>
      _instance;
} _Relation_default_instance_;
class GroundTruthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroundTruth>
      _instance;
} _GroundTruth_default_instance_;
}  // namespace proto
}  // namespace ground_truth
}  // namespace cartographer
namespace protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto {
void InitDefaultsRelationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaultsRigid3d();
  {
    void* ptr = &::cartographer::ground_truth::proto::_Relation_default_instance_;
    new (ptr) ::cartographer::ground_truth::proto::Relation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::ground_truth::proto::Relation::InitAsDefaultInstance();
}

void InitDefaultsRelation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRelationImpl);
}

void InitDefaultsGroundTruthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::InitDefaultsRelation();
  {
    void* ptr = &::cartographer::ground_truth::proto::_GroundTruth_default_instance_;
    new (ptr) ::cartographer::ground_truth::proto::GroundTruth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::ground_truth::proto::GroundTruth::InitAsDefaultInstance();
}

void InitDefaultsGroundTruth() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGroundTruthImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, timestamp1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, timestamp2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, expected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::ground_truth::proto::Relation, covered_distance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::ground_truth::proto::GroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::cartographer::ground_truth::proto::GroundTruth, relation_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::ground_truth::proto::Relation)},
  { 9, -1, sizeof(::cartographer::ground_truth::proto::GroundTruth)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::ground_truth::proto::_Relation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::ground_truth::proto::_GroundTruth_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/ground_truth/proto/relations.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n/cartographer/ground_truth/proto/relati"
      "ons.proto\022\037cartographer.ground_truth.pro"
      "to\032,cartographer/transform/proto/transfo"
      "rm.proto\"\205\001\n\010Relation\022\022\n\ntimestamp1\030\001 \001("
      "\003\022\022\n\ntimestamp2\030\002 \001(\003\0227\n\010expected\030\003 \001(\0132"
      "%.cartographer.transform.proto.Rigid3d\022\030"
      "\n\020covered_distance\030\004 \001(\001\"J\n\013GroundTruth\022"
      ";\n\010relation\030\001 \003(\0132).cartographer.ground_"
      "truth.proto.Relationb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/ground_truth/proto/relations.proto", &protobuf_RegisterTypes);
  ::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto
namespace cartographer {
namespace ground_truth {
namespace proto {

// ===================================================================

void Relation::InitAsDefaultInstance() {
  ::cartographer::ground_truth::proto::_Relation_default_instance_._instance.get_mutable()->expected_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
void Relation::clear_expected() {
  if (GetArenaNoVirtual() == NULL && expected_ != NULL) {
    delete expected_;
  }
  expected_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Relation::kTimestamp1FieldNumber;
const int Relation::kTimestamp2FieldNumber;
const int Relation::kExpectedFieldNumber;
const int Relation::kCoveredDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Relation::Relation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::InitDefaultsRelation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.ground_truth.proto.Relation)
}
Relation::Relation(const Relation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expected()) {
    expected_ = new ::cartographer::transform::proto::Rigid3d(*from.expected_);
  } else {
    expected_ = NULL;
  }
  ::memcpy(&timestamp1_, &from.timestamp1_,
    static_cast<size_t>(reinterpret_cast<char*>(&covered_distance_) -
    reinterpret_cast<char*>(&timestamp1_)) + sizeof(covered_distance_));
  // @@protoc_insertion_point(copy_constructor:cartographer.ground_truth.proto.Relation)
}

void Relation::SharedCtor() {
  ::memset(&expected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&covered_distance_) -
      reinterpret_cast<char*>(&expected_)) + sizeof(covered_distance_));
  _cached_size_ = 0;
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:cartographer.ground_truth.proto.Relation)
  SharedDtor();
}

void Relation::SharedDtor() {
  if (this != internal_default_instance()) delete expected_;
}

void Relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation::descriptor() {
  ::protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Relation& Relation::default_instance() {
  ::protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::InitDefaultsRelation();
  return *internal_default_instance();
}

Relation* Relation::New(::google::protobuf::Arena* arena) const {
  Relation* n = new Relation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.ground_truth.proto.Relation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && expected_ != NULL) {
    delete expected_;
  }
  expected_ = NULL;
  ::memset(&timestamp1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&covered_distance_) -
      reinterpret_cast<char*>(&timestamp1_)) + sizeof(covered_distance_));
  _internal_metadata_.Clear();
}

bool Relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.ground_truth.proto.Relation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d expected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double covered_distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &covered_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.ground_truth.proto.Relation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.ground_truth.proto.Relation)
  return false;
#undef DO_
}

void Relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.ground_truth.proto.Relation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp1 = 1;
  if (this->timestamp1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp1(), output);
  }

  // int64 timestamp2 = 2;
  if (this->timestamp2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp2(), output);
  }

  // .cartographer.transform.proto.Rigid3d expected = 3;
  if (this->has_expected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->expected_, output);
  }

  // double covered_distance = 4;
  if (this->covered_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->covered_distance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.ground_truth.proto.Relation)
}

::google::protobuf::uint8* Relation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.ground_truth.proto.Relation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp1 = 1;
  if (this->timestamp1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp1(), target);
  }

  // int64 timestamp2 = 2;
  if (this->timestamp2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp2(), target);
  }

  // .cartographer.transform.proto.Rigid3d expected = 3;
  if (this->has_expected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->expected_, deterministic, target);
  }

  // double covered_distance = 4;
  if (this->covered_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->covered_distance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.ground_truth.proto.Relation)
  return target;
}

size_t Relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.ground_truth.proto.Relation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d expected = 3;
  if (this->has_expected()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->expected_);
  }

  // int64 timestamp1 = 1;
  if (this->timestamp1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp1());
  }

  // int64 timestamp2 = 2;
  if (this->timestamp2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp2());
  }

  // double covered_distance = 4;
  if (this->covered_distance() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.ground_truth.proto.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  const Relation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Relation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.ground_truth.proto.Relation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.ground_truth.proto.Relation)
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.ground_truth.proto.Relation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expected()) {
    mutable_expected()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.expected());
  }
  if (from.timestamp1() != 0) {
    set_timestamp1(from.timestamp1());
  }
  if (from.timestamp2() != 0) {
    set_timestamp2(from.timestamp2());
  }
  if (from.covered_distance() != 0) {
    set_covered_distance(from.covered_distance());
  }
}

void Relation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.ground_truth.proto.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.ground_truth.proto.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {
  return true;
}

void Relation::Swap(Relation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Relation::InternalSwap(Relation* other) {
  using std::swap;
  swap(expected_, other->expected_);
  swap(timestamp1_, other->timestamp1_);
  swap(timestamp2_, other->timestamp2_);
  swap(covered_distance_, other->covered_distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Relation::GetMetadata() const {
  protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GroundTruth::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroundTruth::kRelationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroundTruth::GroundTruth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::InitDefaultsGroundTruth();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.ground_truth.proto.GroundTruth)
}
GroundTruth::GroundTruth(const GroundTruth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      relation_(from.relation_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.ground_truth.proto.GroundTruth)
}

void GroundTruth::SharedCtor() {
  _cached_size_ = 0;
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:cartographer.ground_truth.proto.GroundTruth)
  SharedDtor();
}

void GroundTruth::SharedDtor() {
}

void GroundTruth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroundTruth::descriptor() {
  ::protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GroundTruth& GroundTruth::default_instance() {
  ::protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::InitDefaultsGroundTruth();
  return *internal_default_instance();
}

GroundTruth* GroundTruth::New(::google::protobuf::Arena* arena) const {
  GroundTruth* n = new GroundTruth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.ground_truth.proto.GroundTruth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relation_.Clear();
  _internal_metadata_.Clear();
}

bool GroundTruth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.ground_truth.proto.GroundTruth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.ground_truth.proto.Relation relation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_relation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.ground_truth.proto.GroundTruth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.ground_truth.proto.GroundTruth)
  return false;
#undef DO_
}

void GroundTruth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.ground_truth.proto.GroundTruth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.ground_truth.proto.Relation relation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relation_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->relation(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.ground_truth.proto.GroundTruth)
}

::google::protobuf::uint8* GroundTruth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.ground_truth.proto.GroundTruth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.ground_truth.proto.Relation relation = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relation_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->relation(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.ground_truth.proto.GroundTruth)
  return target;
}

size_t GroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.ground_truth.proto.GroundTruth)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.ground_truth.proto.Relation relation = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->relation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->relation(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroundTruth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.ground_truth.proto.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundTruth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroundTruth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.ground_truth.proto.GroundTruth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.ground_truth.proto.GroundTruth)
    MergeFrom(*source);
  }
}

void GroundTruth::MergeFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.ground_truth.proto.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relation_.MergeFrom(from.relation_);
}

void GroundTruth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.ground_truth.proto.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.ground_truth.proto.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {
  return true;
}

void GroundTruth::Swap(GroundTruth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroundTruth::InternalSwap(GroundTruth* other) {
  using std::swap;
  relation_.InternalSwap(&other->relation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroundTruth::GetMetadata() const {
  protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cartographer_2fground_5ftruth_2fproto_2frelations_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace ground_truth
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
